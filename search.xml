<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Net Core 多站台共用驗證 Cookie</title>
      <link href="2021/03/10/data-protection-key/"/>
      <url>2021/03/10/data-protection-key/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>當你需要一個安全的機制來保護你的資料時，不妨可以使用 Net Core 的資料保護（Data Protection）。</p><p>他有以下特點：</p><ol><li>容易使用、擴展性高</li><li>基於非對稱的加密機制</li><li>正常情況下，不需要去設定與管理任何密鑰的儲存位置與生命週期</li></ol><blockquote><p>若想了解更多請參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/introduction">ASP.NET Core 資料保護</a></p></blockquote><p>簡單來說你想加解密資料時，可以直接使用 Data Protection 的 API：</p><ul><li>Protect</li><li>Unprotect</li></ul><p>傻瓜式(?)的使用方式，也避免開發者：</p><ol><li>搞不清楚「對稱、非對稱加密、Hash、編碼」的差異下，選擇了錯誤的方式來保護敏感資料。</li><li>自己造輪子實作加解密…</li></ol><blockquote><p>若想了解更多請參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection">ASP.NET Core 中的資料保護 Api 入門</a></p></blockquote><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>在 Net Framework 時代，透過 MachineKey 來處理 Forms Authentication 的 Cookie 加解密（當然正常情況下也不會去動到 MachineKey，都交由系統處理）。</p><p>而 Net Core 雖沒有 Forms Authentication，但卻有差不多的 Cookie-based Authentication，他的 Cookie 加解密則是由上方提到的 Data Protection 機制來處理。</p><h2 id="問題-多個站台之間無法解密彼此的驗證-Cookie"><a href="#問題-多個站台之間無法解密彼此的驗證-Cookie" class="headerlink" title="問題: 多個站台之間無法解密彼此的驗證 Cookie?"></a>問題: 多個站台之間無法解密彼此的驗證 Cookie?</h2><p>「希望在網站過版時不用停機」</p><p>前陣子碰到這個需求，所以同事多建了一個站台，設定好主站台關閉後網址如何對應到備援的站台（同個網址），然後 Cookie 的 Domain 和有效期限也都有設定好，看起來需求就解決了，但實際測試時，卻有以下問題：</p><ol><li>User 在主站台已經登入的情況下使用系統</li><li>把新程式過版到備援站台</li><li>關閉主站台，讓後續流量都交由備援站台處理</li><li>User 繼續使用系統，卻是沒有登入的狀態，被導到登入畫面</li></ol><p>當下直覺是備援站台無法讀取主站台的 Cookie，後來確認了一下，一半對一半錯XD</p><p>Cookie 是可以讀取的，畢竟是同一個網址，退一步來說就算是相同 Domain 下也會讀取的到，無法讀取的是 Cookie Authentication 的驗證 Cookie。</p><p>顯然地，備援站台因為 Key 不對，無法解開主站台留下的 Cookie，所以問題收斂成需要搞懂：</p><ol><li>Data Protection 的金鑰保存在哪?</li><li>金鑰多久會過期?</li><li>我要怎麼讓不同站台共用金鑰?</li></ol><h1 id="Data-Protection-金鑰管理與生命週期"><a href="#Data-Protection-金鑰管理與生命週期" class="headerlink" title="Data Protection 金鑰管理與生命週期"></a>Data Protection 金鑰管理與生命週期</h1><p>該來的還是得來，啃了官方<del>又香又長</del>的文件。</p><h2 id="金鑰儲存位置"><a href="#金鑰儲存位置" class="headerlink" title="金鑰儲存位置"></a>金鑰儲存位置</h2><p>會依照應用程式的操作環境而有所不同：</p><ol><li>（這裡不討論）在 Azure 上會存在 <code>%HOME%\ASP.NET\DataProtection-Keys</code> 資料夾中</li><li>其餘則是除非有特別設定，否則存放在記憶體</li></ol><p>所以有個滿嚴重的問題，如果 Net Core 專案部屬在 IIS 上，應用程式集區預設的：</p><ol><li>29 小時定期回收</li><li>閒置 20 分自動終止（Terminate）</li></ol><p>或是集區手動回收，都會導致驗證的 Cookie 無法讀取。</p><p>除了驗證 Cookie 以外，只要是該機制加密的東西也會無法讀取，像是 CSRF Token。</p><blockquote><p>補充一下實驗結果，如果集區回收可以接受金鑰遺失，而閒置不想要因為後續行為遺失的話，動作由 Terminate 改為 Suspend（凍結）、或是閒置時間直接改為 0 分鐘（不終止也不凍結），則不會導致記憶體中的金鑰遺失。</p></blockquote><p>所以如果在 IIS 下想要保存金鑰，有<a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/advanced#data-protection">多種</a>設定方式，以下列兩種較方便的設定方式：</p><ol><li>建立 Data Protection Registry keys，將金鑰放在 HKLM 機碼中，並限定該集區的帳戶才能存取。</li><li>(推薦)<br>設定 IIS 應用程式集區載入使用者設定檔，金鑰會存在 <code>%LOCALAPPDATA%\ASP.NET\DataProtection-Keys</code> 資料夾中。</li></ol><h3 id="IIS-應用程式集區載入使用者設定檔"><a href="#IIS-應用程式集區載入使用者設定檔" class="headerlink" title="IIS 應用程式集區載入使用者設定檔"></a>IIS 應用程式集區載入使用者設定檔</h3><p>設定為 True 後，會將金鑰保存到上述的資料夾路徑中，也就是圖中的 xml 檔案。</p><p><img src="https://i.imgur.com/GcX1MKD.png" alt="Image"></p><p><img src="https://i.imgur.com/C7qDfxV.png" alt="Image"></p><p>裡面的內容有：</p><ol><li>建立、啟用、逾期時間（除非特別設定，否則金鑰預設的存活時間是三個月）</li><li>金鑰（在 Windows 平台下會透過 DPAPI 加密）</li></ol><p><img src="https://i.imgur.com/DrhGPLX.png" alt="Image"></p><p><strong>提醒一下，此金鑰和 MachineKey 一樣重要，千萬不能外洩!</strong></p><h1 id="接下來"><a href="#接下來" class="headerlink" title="接下來"></a>接下來</h1><p>了解 Data Protection 的金鑰管理機制後，回頭看我們的問題，還差了那麼一點，因為上面講的是單個集區保存金鑰，但多個集區（正式、備援）依舊是讀取各自保存的金鑰，只是集區回收後金鑰不會遺失而已。</p><p>所以如果要讓多個集區、或是分散式部屬的應用程式能透過 Cookie 達到 SSO 的效果，勢必得把金鑰存到這些應用都能共用的地方。</p><h1 id="自訂金鑰儲存位置"><a href="#自訂金鑰儲存位置" class="headerlink" title="自訂金鑰儲存位置"></a>自訂金鑰儲存位置</h1><p>我們可以指定金鑰存到以下位置：</p><ol><li>Azure Key Vault</li><li>File System</li><li>DB</li></ol><blockquote><p>詳情參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview">設定 ASP.NET Core 資料保護</a></p></blockquote><p>請依照專案環境選擇合適的方式，像是兩個站台都建在同一台 Server 上，可以考慮存到 File System；反之可以存到 DB 比較方便。</p><h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><p>存到系統上非常簡單，只需要寫</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddDataProtection()</span><br><span class="line">        .PersistKeysToFileSystem(<span class="keyword">new</span> DirectoryInfo(Configuration[<span class="string">&quot;YourFilePath&quot;</span>]))</span><br><span class="line">        .SetApplicationName(<span class="string">&quot;YourApplicationName&quot;</span>);</span><br><span class="line">        <span class="comment">// 請把所有想要共用同個金鑰的應用程式都指定相同的 Application Name，不然就算吃到相同的金鑰，也會因為 Net Core 應用程式隔離的特性無法成功加解密</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>關於 SetApplicationName 有興趣請參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview#per-application-isolation">應用程式隔離</a></p></blockquote><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p>Key Storage Providers 也有常見的解決方案可以選擇</p><ol><li>Entity Framework Core</li><li>Redis</li></ol><blockquote><p>至於其他 Providers 有興趣請參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-storage-providers">ASP.NET Core 中的金鑰儲存提供者</a></p></blockquote><p>寫法如下：</p><ol><li><p>NuGet 下載 <code>Microsoft.AspNetCore.DataProtection.EntityFrameworkCore</code></p></li><li><p>新增一個 DbContext</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.DataProtection.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyKeysContext</span> : <span class="title">DbContext</span>, <span class="title">IDataProtectionKeyContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// A recommended constructor overload when using EF Core </span></span><br><span class="line">    <span class="comment">// with dependency injection.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyKeysContext</span>(<span class="params">DbContextOptions&lt;MyKeysContext&gt; options</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">options</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This maps to the table that stores keys.</span></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;DataProtectionKey&gt; DataProtectionKeys &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置連線資訊與指定 PersistKeysToDbContext</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(</span><br><span class="line">            Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a DbContext to store your Database Keys</span></span><br><span class="line">    services.AddDbContext&lt;MyKeysContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(</span><br><span class="line">            Configuration.GetConnectionString(<span class="string">&quot;MyKeysConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using Microsoft.AspNetCore.DataProtection;</span></span><br><span class="line">    services.AddDataProtection()</span><br><span class="line">        .PersistKeysToDbContext&lt;MyKeysContext&gt;()</span><br><span class="line">        .SetApplicationName(<span class="string">&quot;YourApplicationName&quot;</span>);</span><br><span class="line">        <span class="comment">// 請把所有想要共用同個金鑰的應用程式都指定相同的 Application Name，不然就算吃到相同的金鑰，也會因為 Net Core 應用程式隔離的特性無法成功加解密</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>migration 然後 update database 產生 DataProtectionKeys 的 Table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add AddDataProtectionKeys --context MyKeysContext</span><br><span class="line">dotnet ef database update --context MyKeysContext</span><br></pre></td></tr></table></figure></li></ol><h2 id="DB-First-解決方法"><a href="#DB-First-解決方法" class="headerlink" title="DB First 解決方法"></a>DB First 解決方法</h2><p>基本上就是這樣，如果有問題的話大概就是第四步，因為我們專案 EF Core 是採 DB First 形式，還是可以解決，只是會有兩種方法：</p><ol><li>可以的話直接 migration 然後 update database，長出 DataProtectionKeys 的 Table 之後，把所有 migration 相關的資料夾、檔案、Table 都刪除。</li><li>如果不能用程式動 Table 的話，可以把 DataProtectionKeys 的 Table 寫成 SQL Script 來給相關人員 Create。</li></ol><p><img src="https://i.imgur.com/48rFEDp.png" alt="Image"></p><p>這邊附上 SQL Server + SSMS 直接產生的 Script，使用前請先確認你使用的 DB 語法有沒有正確。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">IF  EXISTS (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys.objects <span class="keyword">WHERE</span> object_id = OBJECT_ID(N<span class="string">&#x27;[dbo].[DataProtectionKeys]&#x27;</span>) <span class="keyword">AND</span> <span class="keyword">type</span> <span class="keyword">in</span> (N<span class="string">&#x27;U&#x27;</span>))</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [dbo].[DataProtectionKeys]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[DataProtectionKeys](</span><br><span class="line">[<span class="keyword">Id</span>] [<span class="built_in">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[FriendlyName] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line">[<span class="keyword">Xml</span>] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_DataProtectionKeys] PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">[<span class="keyword">Id</span>] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY] TEXTIMAGE_ON [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="金鑰加密"><a href="#金鑰加密" class="headerlink" title="!!金鑰加密!!"></a>!!金鑰加密!!</h2><p>只要指定金鑰的儲存位置，不管是存到 File System 還是 DB，Net Core 都不會把金鑰加密，因為他不知道 DPAPI 是否為適當的加密機制，所以如果有改變儲存位置，記得選擇適當的加密方式。</p><ol><li>DPAPI（Windows Only）</li><li>X.509 憑證</li><li>自訂</li></ol><p>若以保存到 File System 為例，XML 打開會看到警示: <code>Warning: the key below is in an unencrypted form.</code>。</p><p><img src="https://i.imgur.com/eMJxVp0.png" alt="Image"></p><blockquote><p>詳情參考 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-encryption-at-rest">NET Core 的待用金鑰加密</a></p></blockquote><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>我最後選擇透過 EF Core 將金鑰存到 DB，設定共用的金鑰後，也成功讓正式與備援站台讀取彼此的驗證 Cookie 達到不停機過版的效果，當然未來如果 I/O 遇到效能瓶頸，可能會考慮存到 Redis。</p><p>礙於篇幅與實用性，沒有講到全部的細節，故在文中都有穿插連結，不管是有興趣的人還是想要自己處理金鑰的人，都建議閱讀。</p><p>文中內容若有錯誤的地方，請不吝告知。</p><h1 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h1><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview">設定 ASP.NET Core 資料保護</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-encryption-at-rest">Windows 和 Azure 中使用 ASP.NET Core 的待用金鑰加密</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-storage-providers">ASP.NET Core 中的金鑰儲存提供者</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/default-settings">ASP.NET Core 中的資料保護金鑰管理和存留期</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/advanced?view=aspnetcore-5.0#data-protection">ASP.NET Core 模組和 IIS 的 Advanced configuration</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/cookie-sharing">cookie在 ASP.NET apps 之間共用驗證</a></p><p><a href="https://medium.com/swlh/how-to-distribute-data-protection-keys-with-an-asp-net-core-web-app-8b2b5d52851b">How to distribute Data Protection keys with an ASP.NET Core web app</a></p><p><a href="https://blog.darkthread.net/blog/inside-aspnet-autogenkeys/">ASP.NET MachineKey自動產生原理剖析</a></p><p><a href="https://www.cnblogs.com/savorboard/p/5778616.html">ASP.NET Core 数据保护（Data Protection）【上】</a></p><p><a href="https://www.cnblogs.com/liang24/p/13925057.html">ASP.NET Core Authentication系列（四）基于Cookie实现多应用间单点登录（SSO）</a></p>]]></content>
      
      
      <categories>
          
          <category> Net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Protection </tag>
            
            <tag> Cookie </tag>
            
            <tag> SSO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TickTick 待辦事項與行事曆結合 - 基本使用指南</title>
      <link href="2020/12/06/ticktick-startup/"/>
      <url>2020/12/06/ticktick-startup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>對於待辦事項，之前一直沒有好的方式來管理，最早是嘗試使用行事曆，也就是把待辦事項都當成行程放在裡面，但這會有三個問題:</p><ol><li>有些任務是沒有時間概念、或是急迫性的，也就是什麼時候做都可以</li><li>任務之間會有不同的大分類，Ex: 個人、工作，沒辦法很好的分開他們</li><li>行事曆沒辦法一目瞭然的看到所有 ToDoList，所有任務都和日期格子混在一起，導致時間久了，非常懶得開</li></ol><p>後來有嘗試 Google Keep + Google Calandar，這個其實很接近我想要的管理方式了</p><ol><li>任務都放在 Google Keep 上，很簡單就能夠管理</li><li>有需要時間概念的，就把任務壓上提醒時間</li></ol><p>但這還是有四個問題</p><ol><li>行事曆仍然與待辦事項分開，要用兩個 App</li><li>待辦事項用 Google Keep 有時過於陽春，缺乏良好的管理與搜尋方式</li><li>Google Keep 在 IOS 上的體驗非常不好 (截至 2020/12/06)，每次開啟 App 都會停頓個幾秒，好像是在同步，然後便籤很容易誤觸打開或關閉，拖動 Task 也常常卡頓</li><li>缺乏 Kanban 概念，沒辦法像 Trello 那樣把較複雜的任務，視覺化的拖動來控制任務狀態，Ex: Todo、In Progress、Resolved…</li></ol><p>後來有查了一些熱門的待辦事項解決方案</p><ul><li>Todoist<ul><li>跨平台、訂閱制，免費方案沒有提醒功能</li></ul></li><li>TickTick<ul><li>跨平台、訂閱制，免費方案有提醒功能 + 週行事曆</li></ul></li><li>Trello + 行事曆<ul><li>跨平台、但沒辦法一個 App 搞定</li></ul></li><li>OmniFocus (IOS)<ul><li>功能非常完整，但介面複雜、太麻煩、價格太高</li></ul></li></ul><p>經過簡單評估與試用了 Todoist、TickTick 後，覺得 TickTick 完美符合了我的需求XD</p><p>但 TickTick 有中資背景，會介意的三思</p><h1 id="正文開始"><a href="#正文開始" class="headerlink" title="正文開始"></a>正文開始</h1><p>基本操作就不再介紹了，應該簡單到下載安裝好就會使用，第一次使用也會有新手教學。</p><p>以下會直接以<strong>實際情境</strong>來介紹</p><h2 id="分組"><a href="#分組" class="headerlink" title="分組"></a>分組</h2><p>能夠建立好幾個清單來分開 <strong>個人</strong> 與 <strong>工作</strong> 的待辦事項</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/e00YuXh.jpg"><h2 id="待辦清單"><a href="#待辦清單" class="headerlink" title="待辦清單"></a>待辦清單</h2><p>待辦清單除了標題以外，也可以在補充一些內容，或是子任務</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/3ozLMgr.jpg"><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/sTqqAME.jpg"><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>這個有點像心得總結，你可以新增一個非待辦事項的筆記，用來總結一週心得或是任何你想記錄的</p><p>第一張圖片裡面，我就為每個分組都新增了一個 Notes 清單</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/D3Is1fC.jpg"><h2 id="Kanban"><a href="#Kanban" class="headerlink" title="Kanban"></a>Kanban</h2><p>除了條列式的呈現待辦事項以外，也可以切換其他看板模式，達到 Kanban 管理<strong>有狀態</strong>的任務效果。</p><p>我是把 Work 的 List 改成看板而已，因為 Work 的事項有時候比較沒有辦法短時間就完成，但還是要紀錄已經開始處理。</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/MytQ6LZ.jpg"><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/HHgTNpc.jpg"><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/7lbRVWX.jpg"><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>免費版只能使用<strong>週行事曆</strong>而以，需要更詳細的功能可以付費支持。</p><p>行事曆可以一目瞭然的顯示「幾月幾號有什麼事情要做」</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/P0LauKM.jpg"><h3 id="同步其他行事曆"><a href="#同步其他行事曆" class="headerlink" title="同步其他行事曆"></a>同步其他行事曆</h3><p>若有其他行事曆，Ex: iPhone / Google 行事曆，也可以把上面的任務同步進 TickTick</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/YEh5zkQ.jpg"><h2 id="Smart-List"><a href="#Smart-List" class="headerlink" title="Smart List"></a>Smart List</h2><p>上面範例使用了 Work + Personal + Blog 三個清單，若要知道今天或明天總共有哪些待辦事項，不需要每個清單查看，可以到預設的智慧清單查看就好，Ex: 今天、明天、未來 7 天…etc，會幫你統整所有 List 在當天需要做的事情。</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/XdjaPqr.jpg"><h2 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h2><p>TickTick 支援: Web、Windows、Mac、IOS、Android</p><p>若在電腦使用，我建議安裝軟體，而不是使用 Webapp，好處有</p><ol><li>可設定開機自動啟動，Webapp 87% 的機率你過一陣子就不會去開他</li><li>提醒方式更加友善</li><li>看板拖拉更直覺</li><li>可設定桌面懸浮</li></ol><p><img src="https://i.imgur.com/VpyDeAb.jpg"></p><p>桌面懸浮可以新增、顯示待辦事項，若不需要使用也會自動縮合在螢幕邊緣，非常實用</p><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/Gvkitkh.png"><img style="max-width: 350px; width: 100%" src="https://i.imgur.com/POKIs05.jpg"><h2 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h2><p>其他還有番茄鐘、打卡養成習慣等功能，若有興趣的也可以自行研究。</p><p>自己是有在電腦使用番茄鐘，還滿方便的，也不用另外在裝軟體或套件，蕃茄鐘也能夠把執行的時間紀錄給某個任務，然後可以到統計圖表查看處理任務花了多少時間。</p><h1 id="碎念"><a href="#碎念" class="headerlink" title="碎念"></a>碎念</h1><p>以上範例都有解決了我的需求</p><ol><li>簡單管理任務</li><li>結合行事曆</li><li>單一 App</li><li>提醒功能</li><li>心得紀錄</li><li>看板功能</li></ol><p>若有類似需求，或是腦袋已經不堪現實的摧殘，需要助手來幫你管理待辦事項的，強力推薦可以嘗試使用XD</p><h2 id="GTD"><a href="#GTD" class="headerlink" title="GTD"></a>GTD</h2><p>如果想要更進階的流程，像是用 GTD（Getting Things Done）的精神來管理，我覺得 TickTick 也是能夠勝任的。</p><p>像是一開始的蒐集階段，TickTick 就有一個收集箱來讓你放</p><ul><li>靈感突發想到的事情，但還不想分類</li><li>瑣碎但還不足以執行的想法</li><li>etc…</li></ul><p>週任務也能夠新增 List 來解決，每週的檢討也能放在 Notes 裡面，這部分就留給讀者自行研究了。</p><p><img src="https://i.imgur.com/753PDvM.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> ToDoList </category>
          
          <category> TickTick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TickTick </tag>
            
            <tag> ToDoList </tag>
            
            <tag> Kanban </tag>
            
            <tag> Calendar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建站心得</title>
      <link href="2020/11/30/hexo-note/"/>
      <url>2020/11/30/hexo-note/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原本以為用 Hexo、挑個 Theme，之後把 Blog 建起來應該不會遇到什麼問題，也不用特別記錄下來，但…事與願違XD</p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>我用的主題是 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，理論上只要把裡面文檔都看過就能解決 90% 的問題，也不太需要看<a href="https://hexo.io/zh-tw/docs/">官方文檔</a>，弄好之後放在 Github Page，然後前面掛個 Cloudflare。</p><p>Hexo 大致設定</p><ul><li>Disqus / Facebook Comments</li><li>PWA</li><li>Custom Pagination、Footer</li><li>Edit Scaffolds</li></ul><p>Cloudflare 大致設定</p><ul><li>SSL、Always Use HTTPS、Automatic HTTPS Rewrites</li><li>Auto Minify、Cache、Always Online</li></ul><p>SEO 大致處理</p><ul><li>Sitemap、Robots.txt</li><li>Nofollow</li><li>Submit to Google Search Console</li></ul><p>科普知識就不提了，網路上已經很多詳細的文章</p><ul><li>What ‘s Hexo and Why</li><li>What’s Markdown</li><li>How to deploy to Github Page</li><li>How to use your custom domain and How to buy</li><li>What’s SSL</li><li>etc…</li></ul><p>以下會列出當時有遇到的一些問題。</p><h2 id="Pagination-預設-Style-以圖片為背景"><a href="#Pagination-預設-Style-以圖片為背景" class="headerlink" title="Pagination 預設 Style 以圖片為背景"></a>Pagination 預設 Style 以圖片為背景</h2><p><img src="https://imgur.com/ZciUF7y.png"><br><a href="https://jerryc.me/posts/21cfbf15/">圖片來源</a></p><p>主題預設每個 Post 都會有一個封面圖片，如果不想要可以去設定檔拿掉，但拿掉圖片，上/下一頁連結就變成高度很高，但背景是白的連結了。</p><p>只想要單純的文字，像這樣的話</p><p><img src="https://imgur.com/PfZNzxO.png"></p><p>要直接改 <code>themes\butterfly\layout\includes\pagination.pug</code></p><p>以下節錄我調整後的程式碼，以可以調整成自己喜歡的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if(page.prev)</span><br><span class="line">    - var hasPageNext &#x3D; page.next ? &#39;pull-left&#39; : &#39;pull-full&#39;</span><br><span class="line">    .prev-post(class&#x3D;hasPageNext)</span><br><span class="line">        a(href&#x3D;url_for(page.prev.path))</span><br><span class="line">            .pagination-info</span><br><span class="line">                .i.fa.fa-chevron-circle-left</span><br><span class="line">                .prev_info&#x3D;page.prev.title</span><br><span class="line">          </span><br><span class="line">if(page.next)</span><br><span class="line">    - var hasPagePrev &#x3D; page.prev ? &#39;pull-right&#39; : &#39;pull-full&#39;</span><br><span class="line">    .next-post(class&#x3D;hasPagePrev)</span><br><span class="line">        a(href&#x3D;url_for(page.next.path))</span><br><span class="line">            .pagination-info</span><br><span class="line">                .i.fa.fa-chevron-circle-right</span><br><span class="line">                .next_info&#x3D;page.next.title </span><br></pre></td></tr></table></figure><h2 id="Facebook-Comments"><a href="#Facebook-Comments" class="headerlink" title="Facebook Comments"></a>Facebook Comments</h2><h3 id="超級無敵大雷1"><a href="#超級無敵大雷1" class="headerlink" title="超級無敵大雷1"></a>超級無敵大雷1</h3><p>我網站主題是深色(Dark)，但 FaceBook Comments Dark Theme 目前壞掉，只能透過 CSS 把評論區塊背景設為白色，不然會完全看不到字 (Disqus 沒這個問題)。</p><p><img src="https://imgur.com/zGv7BAv.png"></p><p>看起來和 Hexo 無關，是 Facebook 的問題、也有人 2020/08/12 回報了，雖然進度上寫處理完畢，但我 2020/11/30 測試起來問題仍在。</p><p><a href="https://developers.facebook.com/support/bugs/1759174414250782/">https://developers.facebook.com/support/bugs/1759174414250782/</a></p><p><img src="https://i.imgur.com/6QZkv1C.png"></p><p>不想放棄 Facebook Comments + 深色主題的話，我的解法是把 Facebook 的 Comment 區塊直接背景變白色XD</p><p><code>themes\butterfly\source\css\_layout\comments.styl</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.comment-wrap</span><br><span class="line">    &gt; div:nth-child(2)</span><br><span class="line">        background-color: white !important;</span><br><span class="line">        border-radius: 5px !important;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/STYzbcG.png"></p><p>而 Disqus 則維持原本正常的深色主題</p><p><img src="https://i.imgur.com/tfiVAJ1.png"></p><h3 id="超級無敵大雷2"><a href="#超級無敵大雷2" class="headerlink" title="超級無敵大雷2"></a>超級無敵大雷2</h3><p>原本以為這樣就高枕無憂，但 2020/11/30 的 IOS 不管是 Chrome 還是 Safari 都無法透過 Facebook Comments 留言，但桌面版、Android 的可以正常留言…</p><p>狀況有2</p><ol><li>明明已經有登入 Facebook，但留言區抓不到，一樣要登入，可是點了登入之後就瘋狂無限白畫面跳轉。</li><li>留言框自己不斷重整，無法選取打字。</li></ol><p>以上問題測試了 3 台 iPhone 都是這樣QQ，一開始以為是我哪裡沒處理好，但到幾個新聞網站 (水果、聯X) 的留言區測試，發現一樣有這些問題…，這個狀況目前無解。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Facebook Comment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

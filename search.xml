<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一次滲透測試的紀錄</title>
      <link href="2023/06/04/penetration-test/"/>
      <url>2023/06/04/penetration-test/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>被可(ㄑ一ˊ)愛(ㄍㄨㄞˋ)的同事監視，慢慢把一些手邊的筆記整理成文章。</p></blockquote><p>在某間公司任職時，同事間如果有通話需求，會使用 SIP 電話來進行溝通。</p><p>但該 SIP 系統已經運行多年，公司預計要汰換掉它，當時的主管之一想說下架之前可以對它做一些安全性的檢測，所以就有了這篇文章。</p><blockquote><p>ps. 因為當時主管對團隊規劃其中一個方向是希望 team 內除了開發能力之外，也可以具備一些紅隊的能力，自己的系統安全性自己要顧。</p></blockquote><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><h2 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h2><p><code>以下行為皆在取得相關人員的授權後進行</code>，本文僅作為 Writeup，請讀者閱讀後不要自行嘗試，產生的任何後果接與本站無關。</p><blockquote><p>別人家裡門沒鎖，不代表你可以走進去，就算是嘗試也不行。</p></blockquote><p><img src="/image/penetration-test/0.jpg" alt="Image"></p><h2 id="訊息蒐集"><a href="#訊息蒐集" class="headerlink" title="訊息蒐集"></a>訊息蒐集</h2><p>先掃掃 server 開了哪些 port</p><p><img src="/image/penetration-test/1.jpg" alt="Image"></p><p>再爆破路徑</p><p><img src="/image/penetration-test/2.jpg" alt="Image"></p><p><img src="/image/penetration-test/3.jpg" alt="Image"></p><p>大致知道 SIP 系統相關的服務以及後台入口</p><p><img src="/image/penetration-test/4.jpg" alt="Image"></p><p><img src="/image/penetration-test/5.jpg" alt="Image"></p><p><img src="/image/penetration-test/6.jpg" alt="Image"></p><h2 id="漏洞查找"><a href="#漏洞查找" class="headerlink" title="漏洞查找"></a>漏洞查找</h2><p>查了一下 Elastix 有 <code>LFI</code> 的問題</p><p><img src="/image/penetration-test/7.jpg" alt="Image"></p><p><img src="/image/penetration-test/8.jpg" alt="Image"></p><blockquote><p>LFI (Local File Inclusion)<br>LFI 最大的漏洞成因在於後端程式語言使用 include 引入其他檔案的時候，沒有去驗證輸入的值或是惡意攻擊者繞過驗證，導致敏感資料外洩，而敏感資料外洩的資料是在伺服器 local 端，所以這個漏洞叫做 local file inclusion。<br>常見的敏感路徑如 <code>/etc/passwd</code>、<code>/etc/shadow</code>、…</p></blockquote><p>直接讀取 <code>/etc/asterisk/sip_additional.conf</code> 取得所有分機明文密碼</p><p><img src="/image/penetration-test/9.jpg" alt="Image"></p><h2 id="敏感路徑"><a href="#敏感路徑" class="headerlink" title="敏感路徑"></a>敏感路徑</h2><p>外人打進公司的電話似乎會自動錄音，但此路徑沒有特別設權限，可能會讓有心人士得以冒充身分</p><p><img src="/image/penetration-test/10.jpg" alt="Image"></p><h2 id="爆破後台密碼"><a href="#爆破後台密碼" class="headerlink" title="爆破後台密碼"></a>爆破後台密碼</h2><p>繼續用 <code>LFI</code> 讀取到 <code>/var/www/db/acl.db</code>，裡面存放管理員帳號與密碼，但密碼是 MD5 Hash 過的</p><p><img src="/image/penetration-test/11.jpg" alt="Image"></p><p>碰碰運氣，結果管理員使用弱密碼，系統也沒加鹽，直接碰撞出密碼</p><p><img src="/image/penetration-test/12.jpg" alt="Image"></p><p>這裡也可以反思一下，只要加鹽了就一定安全嗎?</p><p><img src="/image/penetration-test/36.jpg" alt="Image"></p><h2 id="後台登入"><a href="#後台登入" class="headerlink" title="後台登入"></a>後台登入</h2><p><img src="/image/penetration-test/13.jpg" alt="Image"></p><p><img src="/image/penetration-test/14.jpg" alt="Image"></p><blockquote><p>目前危害: 有後台 &amp; Asterisk Call Manager &amp; FreePBX 帳密</p><ol><li>可以監聽通話或通話轉接?</li><li>冒充身分進行社交工程?</li><li>若有員工到處都使用同一組密碼…?</li></ol></blockquote><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>繼續翻一下還有沒有可以利用的地方</p><p>發現了模組存放的路徑，看起來透過 FreePBX 安裝的模組都會出現在這裡</p><p><img src="/image/penetration-test/15.jpg" alt="Image"></p><p>看到這個直覺想到或許有機會上傳 <code>WebShell</code></p><h2 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h2><p>寫了個簡單的 shell 打包後上傳</p><p><img src="/image/penetration-test/16.jpg" alt="Image"></p><p><img src="/image/penetration-test/17.jpg" alt="Image"></p><p><img src="/image/penetration-test/18.jpg" alt="Image"></p><p>盡量取了個不引人耳目的名字 <code>checkforupdate.php</code></p><p><img src="/image/penetration-test/19.jpg" alt="Image"></p><p>執行成功!</p><p><img src="/image/penetration-test/20.jpg" alt="Image"></p><blockquote><p>補充一下 <code>WebShell</code> 原理</p></blockquote><p><img src="/image/penetration-test/37.jpg" alt="Image"></p><h2 id="Shell-GUI-Tool"><a href="#Shell-GUI-Tool" class="headerlink" title="Shell GUI Tool"></a>Shell GUI Tool</h2><p>一直寫指令太麻煩了，找了個工具連上去，但不知道是不是系統過舊，有些傳輸協議有問題，比較熱門的幾個 tool 都連接失敗，最終用了經典的<code>菜刀</code>連上去。</p><p><img src="/image/penetration-test/21.jpg" alt="Image"></p><p><img src="/image/penetration-test/22.jpg" alt="Image"></p><h2 id="提權"><a href="#提權" class="headerlink" title="提權"></a>提權</h2><p>目前的帳號權限太低，開始嘗試提權</p><p><img src="/image/penetration-test/23.jpg" alt="Image"></p><p>但馬上遇到幾個問題</p><ol><li>有防火牆，<code>Reverse Shell</code> 一直彈不出來，拿不到交互式 Shell，也沒辦法進一步拿到 <code>tty</code>。</li></ol><p><img src="/image/penetration-test/24.jpg" alt="Image"></p><ol start="2"><li><code>ssh</code> 也被防火牆擋住連不進去，就算有 <code>root</code> 帳密也沒辦法用。</li></ol><blockquote><p>補充 <code>Bind Shell</code> &amp; <code>Reverse Shell</code></p></blockquote><p><img src="/image/penetration-test/38.jpg" alt="Image"></p><blockquote><p><code>Bind Shell</code>、<code>Reverse Shell</code>，因為無法提供完整交互式的互動，所以會再進一步嘗試取得交互式的 Shell。<br>EX: 按上會顯示上一個輸入的指令、sudo(su)、添加帳號密碼。</p></blockquote><h2 id="Next-1"><a href="#Next-1" class="headerlink" title="Next"></a>Next</h2><p>更換了一下思路，提權後不能直接執行 su 或 ssh 就算了，只要有辦法使用得到的 root 帳戶執行命令也可以。</p><h2 id="提權-Again"><a href="#提權-Again" class="headerlink" title="提權 Again"></a>提權 Again</h2><p>用 <code>LFI</code> 看了一下 OS 的版本</p><p><img src="/image/penetration-test/25.jpg" alt="Image"></p><p>確定系統很舊，應該會有漏洞可以使用</p><p><img src="/image/penetration-test/26.jpg" alt="Image"></p><p>掃了一下有出現幾個重大漏洞</p><p><img src="/image/penetration-test/27.jpg" alt="Image"></p><p>其中一個是 <code>Dirty Cow</code></p><p><img src="/image/penetration-test/28.jpg" alt="Image"></p><p>載了 <code>exploit</code> 編譯</p><p><img src="/image/penetration-test/29.jpg" alt="Image"></p><p><img src="/image/penetration-test/30.jpg" alt="Image"></p><p>成功執行，得到了一個 <code>root</code> 權限的帳號</p><p><img src="/image/penetration-test/31.jpg" alt="Image"></p><h2 id="Get-Root"><a href="#Get-Root" class="headerlink" title="Get Root"></a>Get Root</h2><p>用 <code>root</code> 權限執行命令，有嘗試 <code>echo &lt;pass&gt; | sudo -S -u &lt;root_user&gt; command</code></p><p>但沒辦法，最後使用 <code>pty.spawn</code> 執行 <code>su -c command</code> 可行</p><p><img src="/image/penetration-test/32.jpg" alt="Image"></p><h3 id="Root-Test"><a href="#Root-Test" class="headerlink" title="Root Test"></a>Root Test</h3><p><img src="/image/penetration-test/33.jpg" alt="Image"></p><p><img src="/image/penetration-test/34.jpg" alt="Image"></p><p><img src="/image/penetration-test/35.jpg" alt="Image"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ol><li>Elastix、FreePBX 版本過舊，且後台密碼太弱，透過 <code>LFI</code> 拿到密碼，可以<code>查看</code> &amp; <code>修改</code> SIP 密碼，或是<code>錄製通話</code>。</li><li>後台上傳 <code>WebShell</code> 且 SIP Server OS 版本過舊，進一步被拿到 <code>root 權限</code>執行命令。</li></ol><h2 id="修補建議"><a href="#修補建議" class="headerlink" title="修補建議"></a>修補建議</h2><ol><li>將沒用到的舊系統拿掉，避免版本過舊造成的漏洞，EX: <code>LFI</code>、<code>XSS</code>、<code>RCE</code> … etc。</li><li>更新 OS</li><li>把 Server 所有服務的密碼都修改掉 &amp; 檢查密碼強度，EX: <code>DB</code>、<code>Asterisk Call Manager</code>、<code>LDAP</code> … etc。</li></ol><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><ol><li>滲透測試 &amp; 資安防禦的難點在於，往往不是一個致命的漏洞，而是好幾個小漏洞串聯起來，造成嚴重的後果。</li><li>攻擊者的門檻在於，如何利用已知訊息，制定下一步的思路，所以擁有廣泛且扎實的基礎知識，會更有幫助。</li></ol><p>分享這些，希望</p><ol><li>能夠讓大家提升資安意識</li><li>時刻警惕著，可能會有人默默幫你的 server 備份(幫備份)</li></ol><blockquote><p><code>Hacker</code> 與 <code>Cracker</code> 往往只有一線之隔。<br>最後再次嚴肅地提醒，沒有得到對方授權許可的情況下，請不要執行任何可能會造成對方系統損害與權益損失之行為。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> penetration test </tag>
            
            <tag> red team </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - HashTable(2)</title>
      <link href="2022/11/01/leetcode-hashtable-2/"/>
      <url>2022/11/01/leetcode-hashtable-2/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>454: 4Sum II</li><li>383: Ransom Note</li><li>15: 3Sum</li><li>18: 4Sum</li></ul><h1 id="454-4Sum-II"><a href="#454-4Sum-II" class="headerlink" title="454. 4Sum II"></a>454. 4Sum II</h1><p><a href="https://leetcode.com/problems/4sum-ii/">https://leetcode.com/problems/4sum-ii/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:</span><br><span class="line">    - 0 &lt;&#x3D; i, j, k, l &lt; n</span><br><span class="line">    - nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]</span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The two tuples are:</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D;&#x3D; nums1.length</span><br><span class="line">n &#x3D;&#x3D; nums2.length</span><br><span class="line">n &#x3D;&#x3D; nums3.length</span><br><span class="line">n &#x3D;&#x3D; nums4.length</span><br><span class="line">1 &lt;&#x3D; n &lt;&#x3D; 200</span><br><span class="line">-228 &lt;&#x3D; nums1[i], nums2[i], nums3[i], nums4[i] &lt;&#x3D; 228</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以用暴力法疊 4 層迴圈，但時間複雜度為 <code>O(n^4)</code>。</p><p>這題和 <code>1. Two Sum</code> 一樣，題解題思路變化為: <code>每次迭代時，都嘗試去找 Map 中是否存在與其相加為 target 的值</code>。</p><p>只是這邊有 4 個 Array，所以拆成兩兩一組</p><ol><li>先用兩層迴圈處理前兩組 Array，並將各元素之合存入 Map，並記錄出現次數。</li><li>接著再用兩層迴圈處理後兩組 Array，並將相加之合拿進 Map 查詢是否存在與其相加為 0 的值，若有則紀錄該值的出現次數。</li></ol><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>時間複雜度: <code>O(n^2)</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FourSumCount</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2, <span class="built_in">int</span>[] nums3, <span class="built_in">int</span>[] nums4</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Hashtable map = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    <span class="built_in">int</span> tmp;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前兩組 Array 各元素之和 (num1 + nums2)，存入 map (key: 兩數之合、value: 重複出現的次數)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums2.Count(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = nums1[i] + nums2[j];</span><br><span class="line">            <span class="keyword">if</span> (map.ContainsKey(tmp))</span><br><span class="line">            &#123;</span><br><span class="line">                map[tmp] = (<span class="built_in">int</span>)map[tmp] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                map.Add(tmp, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 後兩組 Array 各元素之合 (num3 + num4)，並在 map 中查詢是否有與其相加為 0 的 key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums3.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; nums4.Count(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = nums3[i] + nums4[j];</span><br><span class="line">            <span class="comment">// 找到相加為 0，紀錄次數</span></span><br><span class="line">            <span class="keyword">if</span> (map.ContainsKey(<span class="number">0</span> - tmp))</span><br><span class="line">            &#123;</span><br><span class="line">                res += (<span class="built_in">int</span>)map[<span class="number">0</span> - tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="383-Ransom-Note"><a href="#383-Ransom-Note" class="headerlink" title="383. Ransom Note"></a>383. Ransom Note</h1><p><a href="https://leetcode.com/problems/ransom-note/">https://leetcode.com/problems/ransom-note/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.</span><br><span class="line"></span><br><span class="line">Each letter in magazine can only be used once in ransomNote.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote &#x3D; &quot;a&quot;, magazine &#x3D; &quot;b&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote &#x3D; &quot;aa&quot;, magazine &#x3D; &quot;ab&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote &#x3D; &quot;aa&quot;, magazine &#x3D; &quot;aab&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; ransomNote.length, magazine.length &lt;&#x3D; 105</span><br><span class="line">ransomNote and magazine consist of lowercase English letters.</span><br></pre></td></tr></table></figure><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>判斷<code>字串 ransomNote</code> 是否都在<code>字串 magazine</code> 中存在，且 <code>magazine</code> 每個 char 不能重複給 <code>ransomNote</code> 使用。</p><p>可以暴力法用兩層 for 解決，也可以使用 <code>242: Valid Anagram</code> 的解法。</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>時間複雜度: <code>O(n^2)</code></p><p>shadow code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> magazine</span><br><span class="line">    <span class="keyword">foreach</span> ransomNote</span><br><span class="line">        <span class="keyword">if</span> magazine[i] == ransomNote[j]</span><br><span class="line">            removeCharInString(ransomNote, j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> ransomNote.length == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>時間複雜度: <code>O(n)</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanConstruct</span>(<span class="params"><span class="built_in">string</span> ransomNote, <span class="built_in">string</span> magazine</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span>[] <span class="keyword">record</span> = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; magazine.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record[magazine[i] - &#x27;a&#x27;] += 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ransomNote.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record[ransomNote[i] - &#x27;a&#x27;] -= 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有負數，代表 ransomNote 有 magazine 沒有的 char </span></span><br><span class="line">    <span class="comment">// 或者是有一樣的 char，但其重複的數量大於 magazine 擁有的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (record[i] &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h1><p><a href="https://leetcode.com/problems/3sum/">https://leetcode.com/problems/3sum/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i !&#x3D; j, i !&#x3D; k, and j !&#x3D; k, and nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0.</span><br><span class="line"></span><br><span class="line">Notice that the solution set must not contain duplicate triplets.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br><span class="line"></span><br><span class="line">Explanation: </span><br><span class="line">nums[0] + nums[1] + nums[2] &#x3D; (-1) + 0 + 1 &#x3D; 0.</span><br><span class="line">nums[1] + nums[2] + nums[4] &#x3D; 0 + 1 + (-1) &#x3D; 0.</span><br><span class="line">nums[0] + nums[3] + nums[4] &#x3D; (-1) + 2 + (-1) &#x3D; 0.</span><br><span class="line">The distinct triplets are [-1,0,1] and [-1,-1,2].</span><br><span class="line">Notice that the order of the output and the order of the triplets does not matter.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0,1,1]</span><br><span class="line">Output: []</span><br><span class="line"></span><br><span class="line">Explanation: The only possible triplet does not sum up to 0.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0,0,0]</span><br><span class="line">Output: [[0,0,0]]</span><br><span class="line"></span><br><span class="line">Explanation: The only possible triplet sums up to 0.</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 &lt;&#x3D; nums.length &lt;&#x3D; 3000</span><br><span class="line">-105 &lt;&#x3D; nums[i] &lt;&#x3D; 105</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>這題乍看之下也是參考前面用 <code>HashTable</code> 解決，但題目要求結果不能重複，所以得到所有組合後還得去重。</p><p>這樣解雖然也可以，但直接使用雙指針會相對簡單一些。</p><p>ps. 暴力法可以直接套三層迴圈，時間複雜度為 <code>O(n^3)</code>。</p><p>解題重點:</p><ol><li>因為題目只要求返回 <code>value</code> 而不是 <code>index</code>，所以可以對 <code>array</code> 排序。</li><li>最外層 for 迭代 <code>nums[i]</code>，然後搭配 while 不斷調整 <code>left</code> 與 <code>right</code> 指針往中央收斂，嘗試找到目標組合 <code>nums[i] + nums[left] + nums[right] = 0</code>。</li><li>記得分別對 <code>nums[i]</code>、<code>nums[left]</code>、<code>nums[right]</code> 去重。</li></ol><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>時間複雜度: <code>O(n^2)</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; ThreeSum(<span class="built_in">int</span>[] nums)</span><br><span class="line">&#123;</span><br><span class="line">    IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">    <span class="comment">// 由小到大排序</span></span><br><span class="line">    Array.Sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嘗試用雙指針找到 nums[i] + nums[left] + nums[right] = 0，以下簡稱 a、b、c</span></span><br><span class="line">    <span class="comment">// 結果要求不能有重複的組合，故需針對 a、b、c 分別去重</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若最小值已大於 0，則不可能找到其他組合</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 針對 a 去重</span></span><br><span class="line">        <span class="comment">// 不能寫成 if (nums[i] == nums[i + 1])，因為會漏掉當前的組合，EX: [-1, -1, 2]</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> right = nums.Count() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 透過不斷讓 left &amp; right 往中央收斂，嘗試找到目標組合</span></span><br><span class="line">        <span class="keyword">while</span> (right &gt; left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="comment">// 總和太大，right 往中間移動，讓總和小一點</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 總和太小，left 往中間移動，讓總和大一點</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到目標組合</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[left], nums[right] &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 針對 b 去重</span></span><br><span class="line">                <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 針對 c 去重</span></span><br><span class="line">                <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 往中間移動，進行下一輪查詢</span></span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h1><p><a href="https://leetcode.com/problems/4sum/">https://leetcode.com/problems/4sum/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:</span><br><span class="line">    - 0 &lt;&#x3D; a, b, c, d &lt; n</span><br><span class="line">    - a, b, c, and d are distinct.</span><br><span class="line">    - nums[a] + nums[b] + nums[c] + nums[d] &#x3D;&#x3D; target</span><br><span class="line">You may return the answer in any order.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,0,-1,0,-2,2], target &#x3D; 0</span><br><span class="line">Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,2,2,2,2], target &#x3D; 8</span><br><span class="line">Output: [[2,2,2,2]]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; nums.length &lt;&#x3D; 200</span><br><span class="line">-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</span><br><span class="line">-109 &lt;&#x3D; target &lt;&#x3D; 109</span><br></pre></td></tr></table></figure><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>一樣可以用暴力法，時間複雜度為 <code>O(n^4)</code>，但可以透過雙指針法讓時間複雜度變為 <code>O(n^3)</code>。</p><p>和前一題一樣，只是多了一層迴圈同時固定兩個值 <code>nums[i]</code>、<code>nums[j]</code>。</p><h2 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h2><p>時間複雜度: <code>O(n^3)</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; FourSum(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line">    IList&lt;IList&lt;<span class="built_in">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">    <span class="comment">// 由小到大排序</span></span><br><span class="line">    Array.Sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嘗試用雙指針找到 nums[i] + nums[j] + nums[left] + nums[right] = target，以下簡稱 a、b、c、d</span></span><br><span class="line">    <span class="comment">// 結果要求不能有重複的組合，故需針對 a、b、c、d 分別去重</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在 nums[i] 已大於 0，當其大於 target 代表已找不到目標組合</span></span><br><span class="line">        <span class="comment">// 多加一個大於 0 的判斷是因為 target 可能是負數，EX: [-5, -4, -3, -2]，target = -14</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 針對 a 去重</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; nums.Count(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 針對 b 去重</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> left = j + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> right = nums.Count() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 透過不斷讓 left &amp; right 往中央收斂，嘗試找到目標組合</span></span><br><span class="line">            <span class="keyword">while</span> (right &gt; left)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                <span class="comment">// 總和太大，right 往中間移動，讓總和小一點</span></span><br><span class="line">                <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 總和太小，left 往中間移動，讓總和大一點</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到目標組合</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; nums[i], nums[j], nums[left], nums[right] &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 針對 c 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 針對 d 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 往中間移動，進行下一輪查詢</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 4sum-ii </tag>
            
            <tag> ransom-note </tag>
            
            <tag> 3sum </tag>
            
            <tag> 4sum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - HashTable</title>
      <link href="2022/10/31/leetcode-hashtable/"/>
      <url>2022/10/31/leetcode-hashtable/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>242: Valid Anagram</li><li>1002: Find Common Characters</li><li>349: Intersection of Two Arrays</li><li>202: Happy Number</li><li>1: Two Sum</li></ul><h1 id="知識點"><a href="#知識點" class="headerlink" title="知識點"></a>知識點</h1><p>通常 HashTable 用來快速判斷一個元素是否在集合中。</p><p>常見的結構為:</p><ul><li>Array</li><li>Set: 可以粗暴理解為重複 value 的 Array。</li><li>Map: key value pair 的集合，key 不能重複。</li></ul><h1 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a>242. Valid Anagram</h1><p><a href="https://leetcode.com/problems/valid-anagram/">https://leetcode.com/problems/valid-anagram/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given two strings s and t, return true if t is an anagram of s, and false otherwise.</span><br><span class="line"></span><br><span class="line">An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; s.length, t.length &lt;&#x3D; 5 * 104</span><br><span class="line">s and t consist of lowercase English letters.</span><br></pre></td></tr></table></figure><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>直接把 string 中的 char 當 key，然後<code>第一個</code>字串在每次寫入 array 都 <code>+1</code>，<code>第二個</code>字串則 <code>-1</code>，如果最後 array 的每個元素都是 <code>0</code> 代表兩個字串為 Valid Anagram。</p><blockquote><p>重要: 在取 string 中的 char 時，千萬不要用 <code>s.ElementAt(i)</code>，這樣效能太慢 leetcode 會直接 Time Limit Exceeded，要寫 <code>s[i]</code>。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsAnagram</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 題目限制，s、t 只會是小寫字母</span></span><br><span class="line">    <span class="built_in">int</span>[] <span class="keyword">record</span> = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用字母順序當 key</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record[s[i] - &#x27;a&#x27;] += 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; t.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record[t[i] - &#x27;a&#x27;] -= 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">record</span>.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (record[i] != 0)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1002-Find-Common-Characters"><a href="#1002-Find-Common-Characters" class="headerlink" title="1002. Find Common Characters"></a>1002. Find Common Characters</h1><p><a href="https://leetcode.com/problems/find-common-characters/">https://leetcode.com/problems/find-common-characters/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]</span><br><span class="line">Output: [&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;cool&quot;,&quot;lock&quot;,&quot;cook&quot;]</span><br><span class="line">Output: [&quot;c&quot;,&quot;o&quot;]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; words.length &lt;&#x3D; 100</span><br><span class="line">1 &lt;&#x3D; words[i].length &lt;&#x3D; 100</span><br><span class="line">words[i] consists of lowercase English letters.</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>題目可以理解為每個字母在所有字串中都出現的話就列出來。</p><p>延續使用 HashTable，紀錄 string 每個 char 出現的次數後，把所有紀錄整合起來，每個 char 出現的次數取最小值，如果為 0 則代表該 char 在所有 string 中都沒有出現，反之大於 0 則是在所有 string 中都有出現。</p><p>EX:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;abc&quot; &#x3D;&gt; [1, 1, 1, 0, 0]</span><br><span class="line">&quot;dce&quot; &#x3D;&gt; [0, 0, 1, 1, 1]</span><br></pre></td></tr></table></figure><p>每個 char 出現次數取最小後: <code>[0, 0, 1, 0, 0]</code>，所以得知 <code>c</code> 同時出現在兩組字串中。</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;<span class="built_in">string</span>&gt; <span class="title">CommonChars</span>(<span class="params"><span class="built_in">string</span>[] words</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">if</span> (words.Count() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整合 words 所有的 string，只紀錄 char 出現的最小次數</span></span><br><span class="line">    <span class="built_in">int</span>[] hash = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; words.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 紀錄 string 中每個 char 出現的次數</span></span><br><span class="line">        <span class="built_in">int</span>[] tmpStr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; words[i].Count(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmpStr[words[i][j] - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首輪沒有前組可比較</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hash = tmpStr;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次更新 hash，讓其只紀錄 char 出現的最小次數</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            hash[k] = Math.Min(hash[k], tmpStr[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把數字轉回 char</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1. 不等於 0 代表該 char 在 words 中的所有 string 都有出現</span></span><br><span class="line">        <span class="comment">// 2. 用 while 因為如果 char 重複出現，需要全部列出</span></span><br><span class="line">        <span class="keyword">while</span> (hash[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> c = (<span class="built_in">char</span>)(i + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            result.Add(c.ToString());</span><br><span class="line">            hash[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="349-Intersection-of-Two-Arrays"><a href="#349-Intersection-of-Two-Arrays" class="headerlink" title="349. Intersection of Two Arrays"></a>349. Intersection of Two Arrays</h1><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/">https://leetcode.com/problems/intersection-of-two-arrays/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [9,4]</span><br><span class="line">Explanation: [4,9] is also accepted.</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; nums1.length, nums2.length &lt;&#x3D; 1000</span><br><span class="line">0 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 1000</span><br></pre></td></tr></table></figure><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>前面兩題都是英文字母，會使用的空間就是 26 個而已，所以使用 Array[26] 來當 HashTable。</p><p>但這題變成數字，</p><ol><li>雖然有限定範圍在 1000 內，但資料有可能過於分散或太少而浪費空間</li><li>題目限定 result 必須 unique</li></ol><p>故此處改用 <code>HashSet</code>。</p><p>其實也可以使用兩層 for 暴力法，但時間複雜度為 <code>O(n^2)</code>。</p><p>而用 <code>HashSet</code> 查詢的時間複雜度為 <code>O(1)</code>，所以整體時間複雜度就變為 <code>O(n)</code>。</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">Intersection</span>(<span class="params"><span class="built_in">int</span>[] nums1, <span class="built_in">int</span>[] nums2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums1.Any() || !nums2.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashSet&lt;<span class="built_in">int</span>&gt; set1 = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    HashSet&lt;<span class="built_in">int</span>&gt; uniqueResult = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        set1.Add(nums1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums2.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 此處查詢的複雜度為 O(1)</span></span><br><span class="line">        <span class="keyword">if</span> (set1.Contains(nums2[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            uniqueResult.Add(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uniqueResult.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="202-Happy-Number"><a href="#202-Happy-Number" class="headerlink" title="202. Happy Number"></a>202. Happy Number</h1><p><a href="https://leetcode.com/problems/happy-number/">https://leetcode.com/problems/happy-number/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Write an algorithm to determine if a number n is happy.</span><br><span class="line"></span><br><span class="line">A happy number is a number defined by the following process:</span><br><span class="line"></span><br><span class="line">Starting with any positive integer, replace the number by the sum of the squares of its digits.</span><br><span class="line">Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</span><br><span class="line">Those numbers for which this process ends in 1 are happy.</span><br><span class="line">Return true if n is a happy number, and false if not.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: n &#x3D; 19</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">12 + 92 &#x3D; 82</span><br><span class="line">82 + 22 &#x3D; 68</span><br><span class="line">62 + 82 &#x3D; 100</span><br><span class="line">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n &#x3D; 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; n &lt;&#x3D; 231 - 1</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>題目說可能無法算出 <code>1</code> 進而無限循環，乍看之下很麻煩，但其實可以理解為: <code>進入無限循環意味著每一輪的計算結果曾經出現</code>。</p><p>如果要判過一個元素是否存在，那就進入 HashTable 的守備範圍了。</p><h2 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsHappy</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> tmp = n;</span><br><span class="line">    HashSet&lt;<span class="built_in">int</span>&gt; <span class="keyword">record</span> = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="number">1</span> &amp;&amp; !<span class="keyword">record</span>.Contains(tmp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">record</span>.Add(tmp);</span><br><span class="line">        tmp = CalHappyNumber(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">CalHappyNumber</span>(<span class="params"><span class="built_in">int</span> m</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> tmp = m % <span class="number">10</span>;</span><br><span class="line">        res += (<span class="built_in">int</span>)Math.Pow(tmp, <span class="number">2</span>);</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h1><p><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</span><br><span class="line"></span><br><span class="line">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br><span class="line"></span><br><span class="line">You can return the answer in any order.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">Output: [0,1]</span><br><span class="line"></span><br><span class="line">Explanation: Because nums[0] + nums[1] &#x3D;&#x3D; 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,3], target &#x3D; 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;&#x3D; nums.length &lt;&#x3D; 104</span><br><span class="line">-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</span><br><span class="line">-109 &lt;&#x3D; target &lt;&#x3D; 109</span><br><span class="line">Only one valid answer exists.</span><br></pre></td></tr></table></figure><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>LeetCode 第一題，夢想<del>痛苦</del>開始的地方。</p><p>可以用兩層 for 暴力解，但也可以透過 HashTable 來解，時間複雜度為 <code>O(n)</code>。</p><p>這題解題思路為: <code>每次迭代時，都嘗試去找 Array 中是否存在與其相加為 target 的值</code>。</p><p>EX:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Input: [1, 2, 3]，Target &#x3D; 4</span><br></pre></td></tr></table></figure><p>那就是<br>第一輪 <code>1</code> 的時候，嘗試找出 <code>4 - 1 = 3</code><br>第二輪 <code>2</code> 的時候，嘗試找出 <code>4 - 2 = 2</code><br>第三輪 <code>3</code> 的時候，嘗試找出 <code>4 - 3 = 1</code></p><p>要確認某個元素是否在集合中，又進入 HashTable 的守備範圍了，只是這次需要 return index，所以要用 map (C# 為 <code>HashTable</code>) 來同時存 key &amp; value。</p><h2 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h2><p>此題把 HashTable 的 <code>key</code> 用來存 Array 的值，<code>value</code> 用來存 index。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span>[] res = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (!nums.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hashtable map = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 嘗試在 map 中找出與當前迭代值相加為 target 的 key</span></span><br><span class="line">        <span class="built_in">int</span> tmp = target - nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到</span></span><br><span class="line">        <span class="keyword">if</span> (map.ContainsKey(tmp))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 取出 map 中的 value 也就是 array 的 index</span></span><br><span class="line">            res[<span class="number">0</span>] = (<span class="built_in">int</span>)map[tmp];</span><br><span class="line">            res[<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有重複的 key 會噴錯</span></span><br><span class="line">        <span class="keyword">if</span> (!map.ContainsKey(nums[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// map 中沒有找到，把當前迭代的值存入 map</span></span><br><span class="line">            map.Add(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> valid-anagram </tag>
            
            <tag> find-common-characters </tag>
            
            <tag> intersection-of-two-arrays </tag>
            
            <tag> happy-number </tag>
            
            <tag> two-sum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - LinkedList(2)</title>
      <link href="2022/10/29/leetcode-linked-list-2/"/>
      <url>2022/10/29/leetcode-linked-list-2/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>24: Swap Nodes in Pairs</li><li>19: Remove Nth Node From End of List</li><li>160: Intersection of Two Linked Lists</li><li>142: Linked List Cycle II</li></ul><h1 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a>24. Swap Nodes in Pairs</h1><p><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">https://leetcode.com/problems/swap-nodes-in-pairs/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4]</span><br><span class="line">Output: [2,1,4,3]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The number of nodes in the list is in the range [0, 100].</span><br><span class="line">0 &lt;&#x3D; Node.val &lt;&#x3D; 100</span><br></pre></td></tr></table></figure><h1 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h1><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">https://leetcode.com/problems/remove-nth-node-from-end-of-list/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given the head of a linked list, remove the nth node from the end of the list and return its head.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4,5], n &#x3D; 2</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1], n &#x3D; 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], n &#x3D; 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The number of nodes in the list is sz.</span><br><span class="line">1 &lt;&#x3D; sz &lt;&#x3D; 30</span><br><span class="line">0 &lt;&#x3D; Node.val &lt;&#x3D; 100</span><br><span class="line">1 &lt;&#x3D; n &lt;&#x3D; sz</span><br></pre></td></tr></table></figure><h1 id="160-Intersection-of-Two-Linked-Lists"><a href="#160-Intersection-of-Two-Linked-Lists" class="headerlink" title="160. Intersection of Two Linked Lists"></a>160. Intersection of Two Linked Lists</h1><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">https://leetcode.com/problems/intersection-of-two-linked-lists/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3</span><br><span class="line">Output: Intersected at &#39;8&#39;</span><br><span class="line">Explanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).</span><br><span class="line">From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span><br><span class="line">- Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 2, listA &#x3D; [1,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1</span><br><span class="line">Output: Intersected at &#39;2&#39;</span><br><span class="line">Explanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).</span><br><span class="line">From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2</span><br><span class="line">Output: No intersection</span><br><span class="line">Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.</span><br><span class="line">Explanation: The two lists do not intersect, so return null.</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The number of nodes of listA is in the m.</span><br><span class="line">The number of nodes of listB is in the n.</span><br><span class="line">1 &lt;&#x3D; m, n &lt;&#x3D; 3 * 104</span><br><span class="line">1 &lt;&#x3D; Node.val &lt;&#x3D; 105</span><br><span class="line">0 &lt;&#x3D; skipA &lt; m</span><br><span class="line">0 &lt;&#x3D; skipB &lt; n</span><br><span class="line">intersectVal is 0 if listA and listB do not intersect.</span><br><span class="line">intersectVal &#x3D;&#x3D; listA[skipA] &#x3D;&#x3D; listB[skipB] if listA and listB intersect.</span><br></pre></td></tr></table></figure><h1 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a>142. Linked List Cycle II</h1><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/">https://leetcode.com/problems/linked-list-cycle-ii/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.</span><br><span class="line"></span><br><span class="line">There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&#39;s next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.</span><br><span class="line"></span><br><span class="line">Do not modify the linked list.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: tail connects to node index 1</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: tail connects to node index 0</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The number of the nodes in the list is in the range [0, 104].</span><br><span class="line">-105 &lt;&#x3D; Node.val &lt;&#x3D; 105</span><br><span class="line">pos is -1 or a valid index in the linked-list.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swap-nodes-in-pairs </tag>
            
            <tag> remove-nth-node-from-end-of-list </tag>
            
            <tag> intersection-of-two-linked-lists </tag>
            
            <tag> linked-list-cycle-ii </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - LinkedList</title>
      <link href="2022/10/28/leetcode-linked-list/"/>
      <url>2022/10/28/leetcode-linked-list/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>203: Remove Linked List Elements</li><li>707: Design Linked List</li><li>206: Reverse Linked List</li></ul><h1 id="知識點"><a href="#知識點" class="headerlink" title="知識點"></a>知識點</h1><ol><li><p>linkedlist 每一個節點包含兩個部分，一個屬性存放資料，一個指針負責指向下一個節點位置(若無則 null)。</p><p> 自己手寫的話，最基本的 ListNode 會像這樣</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">int</span> val, ListNode next = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>linkdlist 不像 array 在記憶體中是連續的位址，而是分散的存在各位址，再透過指針把整個 list 串起來，所以其長度也不需要在一開始就固定。</p></li><li><p>新增節點(curr)時，需要把 curr 的 next 指向 pre 的 next，然後把 pre 的 next 指向 curr。<br> 舉例: [a, b, d, e]，想要在 b 後面插入 c 時，</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.next = b.next;</span><br><span class="line">b.next = c;</span><br></pre></td></tr></table></figure></li><li><p>刪除節點(curr)時，需要把 curr 的前一個節點 pre 指向 curr.next。<br> 舉例: [a, b, c, d, e]，想要刪除 c 時，</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.next = c.next;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>節點的刪除不是真的把該節點刪除，而是讓 linkedlist 中沒有任何節點再指向該節點。<br>可以想像成一個人如果被全世界所有人遺忘、不再被需要，那他在人類社會中就如同不存在一樣(?<br>ps. 依照各語言特性，該節點可能會被自動回收，不用自己手動清除。</p></blockquote><h2 id="時間複雜度比較"><a href="#時間複雜度比較" class="headerlink" title="時間複雜度比較"></a>時間複雜度比較</h2><p>查詢:<br>Array: O(1)<br>LinkedList: O(n)</p><p>新增/刪除:<br>Array: O(n)<br>LinkedList: O(1)</p><h1 id="203-Remove-Linked-List-Elements"><a href="#203-Remove-Linked-List-Elements" class="headerlink" title="203. Remove Linked List Elements"></a>203. Remove Linked List Elements</h1><p><a href="https://leetcode.com/problems/remove-linked-list-elements/">https://leetcode.com/problems/remove-linked-list-elements/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val &#x3D;&#x3D; val, and return the new head.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,6,3,4,5,6], val &#x3D; 6</span><br><span class="line">Output: [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [], val &#x3D; 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [7,7,7,7], val &#x3D; 7</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The number of nodes in the list is in the range [0, 104].</span><br><span class="line">1 &lt;&#x3D; Node.val &lt;&#x3D; 50</span><br><span class="line">0 &lt;&#x3D; val &lt;&#x3D; 50</span><br></pre></td></tr></table></figure><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="設置虛擬-head-節點"><a href="#設置虛擬-head-節點" class="headerlink" title="設置虛擬 head 節點"></a>設置虛擬 head 節點</h3><p>時間複雜度: <code>O(n)</code></p><p>刪除的流程是找到欲刪除節點的前一個節點，然後將前一個節點的 next 指向欲刪除節點的 next。</p><p>但如果欲刪除的節點就是 linkelist 的第一個節點也就是 head 時，還得特別處理這種情境。</p><p>可以透過設定一個虛擬的 head，讓刪除的邏輯統一。 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">RemoveElements</span>(<span class="params">ListNode head, <span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定虛擬節點，避免刪除 head 的情況要特別處理</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>, head);</span><br><span class="line">    <span class="comment">// 前一個節點</span></span><br><span class="line">    ListNode pre = dummy;</span><br><span class="line">    <span class="comment">// 當前節點</span></span><br><span class="line">    ListNode cur = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 發現要刪除的節點</span></span><br><span class="line">        <span class="keyword">if</span> (cur.val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 將前一個節點的 next 指向當前節點的 next</span></span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不需刪除則將 pre 和 cur 都往後移動，以便檢查下一個節點</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為習慣在 ide 上寫完再貼到 leetcode 提交，這邊附上寫得很醜的 GenerateListNodes 方法XD</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">GenerateListNodes</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; vals</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode head = <span class="literal">null</span>;</span><br><span class="line">    ListNode curr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!vals.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(vals.First());</span><br><span class="line">        curr = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vals.Count == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; vals.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(vals.ElementAt(i));</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = GenerateListNodes(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = RemoveElements(input, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h1 id="707-Design-Linked-List"><a href="#707-Design-Linked-List" class="headerlink" title="707. Design Linked List"></a>707. Design Linked List</h1><p><a href="https://leetcode.com/problems/design-linked-list/">https://leetcode.com/problems/design-linked-list/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Design your implementation of the linked list. You can choose to use a singly or doubly linked list.</span><br><span class="line">A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer&#x2F;reference to the next node.</span><br><span class="line">If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</span><br><span class="line"></span><br><span class="line">Implement the MyLinkedList class:</span><br><span class="line">- MyLinkedList() Initializes the MyLinkedList object.</span><br><span class="line">- int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.</span><br><span class="line">- void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</span><br><span class="line">- void addAtTail(int val) Append a node of value val as the last element of the linked list.</span><br><span class="line">- void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.</span><br><span class="line">- void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyLinkedList myLinkedList &#x3D; new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    &#x2F;&#x2F; linked list becomes 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              &#x2F;&#x2F; return 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    &#x2F;&#x2F; now the linked list is 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              &#x2F;&#x2F; return 3</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;&#x3D; index, val &lt;&#x3D; 1000</span><br><span class="line">Please do not use the built-in LinkedList library.</span><br><span class="line">At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.</span><br></pre></td></tr></table></figure><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leetcode 上可以不用寫</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span>(<span class="params"><span class="built_in">int</span> val, ListNode next = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyLinkedList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> size;</span><br><span class="line">    <span class="comment">// 虛擬 head</span></span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得指定 index 之 value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode currentNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行 index + 1 次(因為包含虛擬 head)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= index; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddAtHead</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AddAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddAtTail</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AddAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 index 個節點前面新增一個節點</span></span><br><span class="line">    <span class="comment">// 如果 index &lt;= 0，那麼新增的節點就是新的 head</span></span><br><span class="line">    <span class="comment">// 如果 index == List 長度，那麼新增的節點就是新的 tail</span></span><br><span class="line">    <span class="comment">// 如果 index &gt; List 長度，則直接 return</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddAtIndex</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        <span class="comment">// 執行 index 次(因為包含虛擬 head)，找到欲新增 index 的前一個節點</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add</span></span><br><span class="line">        <span class="comment">// 新節點 next 指向 pre.next</span></span><br><span class="line">        ListNode needAdd = <span class="keyword">new</span> ListNode(val, pre.next);</span><br><span class="line">        <span class="comment">// pre 指向新節點</span></span><br><span class="line">        pre.next = needAdd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新 list 長度</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刪除第 index 個節點</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteAtIndex</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        <span class="comment">// 執行 index 次(因為包含虛擬 head)，找到欲刪除 index 的前一個節點</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新 list 長度</span></span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            Console.WriteLine(curr.val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法範例:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> MyLinkedList();</span><br><span class="line">t.PrintList(); <span class="comment">// nothing</span></span><br><span class="line">t.AddAtHead(<span class="number">1</span>);</span><br><span class="line">t.AddAtTail(<span class="number">3</span>);</span><br><span class="line">t.AddAtIndex(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">t.PrintList(); <span class="comment">// 1, 2, 3</span></span><br><span class="line">t.DeleteAtIndex(<span class="number">0</span>);</span><br><span class="line">t.PrintList(); <span class="comment">// 2, 3</span></span><br></pre></td></tr></table></figure><h1 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h1><p><a href="https://leetcode.com/problems/reverse-linked-list/">https://leetcode.com/problems/reverse-linked-list/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given the head of a singly linked list, reverse the list, and return the reversed list.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4,5]</span><br><span class="line">Output: [5,4,3,2,1]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; [1,2]</span><br><span class="line">Output: [2,1]</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head &#x3D; []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>要反轉 linkedlist，基本上就是把每一次迭代的節點指針往回指，但要注意往回指之前要先暫存下一個節點。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span>(<span class="params">ListNode head</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode pre = <span class="literal">null</span>;</span><br><span class="line">    ListNode curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 暫存下一個節點</span></span><br><span class="line">        ListNode next = curr.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往回指</span></span><br><span class="line">        curr.next = pre;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 準備處理下一個節點</span></span><br><span class="line">        pre = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// curr 最後會是舊 tail.next 也就是 null，所以 tail 要取 pre </span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remove-linked-list-elements </tag>
            
            <tag> design-linked-list </tag>
            
            <tag> reverse-linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - Array(2)</title>
      <link href="2022/10/27/leetcode-array-2/"/>
      <url>2022/10/27/leetcode-array-2/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>977: Squares of a Sorted Array</li><li>209: Minimum Size Subarray Sum</li></ul><h1 id="977-Squares-of-a-Sorted-Array"><a href="#977-Squares-of-a-Sorted-Array" class="headerlink" title="977. Squares of a Sorted Array"></a>977. Squares of a Sorted Array</h1><p><a href="https://leetcode.com/problems/squares-of-a-sorted-array">https://leetcode.com/problems/squares-of-a-sorted-array</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-4,-1,0,3,10]</span><br><span class="line">Output: [0,1,9,16,100]</span><br><span class="line">Explanation: After squaring, the array becomes [16,1,0,9,100].</span><br><span class="line">After sorting, it becomes [0,1,9,16,100].</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-7,-3,2,3,11]</span><br><span class="line">Output: [4,9,9,49,121]</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; nums.length &lt;&#x3D; 104</span><br><span class="line">-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</span><br><span class="line">nums is sorted in non-decreasing order.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?</span><br></pre></td></tr></table></figure><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>時間複雜度: <code>O(nlogn)</code></p><p>沒什麼懸念，for loop 把每個元素平方，然後再排序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SortedSquares</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[i] = nums[i] * nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Array.Sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="雙指針法"><a href="#雙指針法" class="headerlink" title="雙指針法"></a>雙指針法</h3><p>時間複雜度: <code>O(n)</code></p><p>因為題目給定 Array <strong>包含正負數且已經排序過，所以平方後的最大值一定在陣列的最左邊或最右邊</strong>。<br>透過雙指針，每次迭代同時比較左、右邊哪個平方後較大，將其放入新陣列，並將該指針往中間前進一格。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SortedSquares</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 新陣列</span></span><br><span class="line">    <span class="built_in">int</span>[] result = <span class="keyword">new</span> <span class="built_in">int</span>[nums.Count()];</span><br><span class="line">    <span class="comment">// 雙指針從左、右邊開始，所以會由大到小取值，故從最後開始寫入</span></span><br><span class="line">    <span class="built_in">int</span> resultIndexFromEnd = nums.Count() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 結束條件為小於等於，可以理解為左閉右閉，如果只有小於會漏掉最後的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> left = <span class="number">0</span>, right = nums.Count() - <span class="number">1</span>; left &lt;= right;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Math.Pow(nums[left], <span class="number">2</span>) &lt; Math.Pow(nums[right], <span class="number">2</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 將較大的平方值寫入 result</span></span><br><span class="line">            result[resultIndexFromEnd] = (<span class="built_in">int</span>)Math.Pow(nums[right], <span class="number">2</span>);</span><br><span class="line">            resultIndexFromEnd--;</span><br><span class="line">            <span class="comment">// 右指針往中間推</span></span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 進入 else 條件為 rightValue &lt;= leftValue，若相等時放入左、右都可以，所以就一起在 else block 處理</span></span><br><span class="line">            result[resultIndexFromEnd] = (<span class="built_in">int</span>)Math.Pow(nums[left], <span class="number">2</span>);</span><br><span class="line">            resultIndexFromEnd--;</span><br><span class="line">            <span class="comment">// 左指針往中間推</span></span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a>209. Minimum Size Subarray Sum</h1><p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">https://leetcode.com/problems/minimum-size-subarray-sum/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: target &#x3D; 4, nums &#x3D; [1,4,4]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: target &#x3D; 11, nums &#x3D; [1,1,1,1,1,1,1,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; target &lt;&#x3D; 109</span><br><span class="line">1 &lt;&#x3D; nums.length &lt;&#x3D; 105</span><br><span class="line">1 &lt;&#x3D; nums[i] &lt;&#x3D; 104</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).</span><br></pre></td></tr></table></figure><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><h3 id="暴力法-1"><a href="#暴力法-1" class="headerlink" title="暴力法"></a>暴力法</h3><p>時間複雜度: <code>O(n^2)</code></p><p>這個解法 leetcode 不給過，顯示 <code>Time Limit Exceeded</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MinSubArrayLen</span>(<span class="params"><span class="built_in">int</span> target, <span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt; nums.Count(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> subLength = j - i + <span class="number">1</span>;</span><br><span class="line">                result = Math.Min(subLength, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result == <span class="built_in">int</span>.MaxValue ? <span class="number">0</span> : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然暴力法無法通過，但還是可以藉由它的思路進行優化。</p><p>透過兩個 for loop 找尋所有的可能性，何謂所有的可能性，以 Example1 為例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure><p>暴力法所有可能性組合就是<br>2 + 3 + 1 + 2 =&gt; 長度為 4<br>3 + 1 + 2 + 4 =&gt; 長度為 4<br>1 + 2 + 4 =&gt; 長度為 3<br>2 + 4 + 3 =&gt; 長度為 3<br><strong>4 + 3 =&gt; 長度為 2</strong><br>3 =&gt; 未大於等於 7，不符合條件</p><p>最後會 return <code>2</code></p><p>在這過程中，可以理解為外層的 for 代表每一輪搜尋的<code>起始位置</code>，內層的 for 代表搜尋的<code>停止位置</code>。</p><h3 id="雙指針法-1"><a href="#雙指針法-1" class="headerlink" title="雙指針法"></a>雙指針法</h3><p>如果要優化勢必得拿掉一個 for，讓它只迭代一次，也就是時間複雜度為 <code>O(n)</code>。</p><p>透過雙指針，讓外層的 for 變成搜尋的<code>停止位置</code>，而<code>起始位置</code>則透過每一輪的動態檢查調整。</p><p>解法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public int MinSubArrayLen(int target, int[] nums)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; int.MaxValue;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int left &#x3D; 0;</span><br><span class="line">    for (int right &#x3D; 0; right &lt; nums.Count(); right++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum +&#x3D; nums[right];</span><br><span class="line">        &#x2F;&#x2F; 動態檢查符合條件的組合</span><br><span class="line">        while (sum &gt;&#x3D; target)</span><br><span class="line">        &#123;</span><br><span class="line">            int subLength &#x3D; right - left + 1;</span><br><span class="line">            result &#x3D; Math.Min(subLength, result);</span><br><span class="line">            &#x2F;&#x2F; 找到之後就變更起始位置，搜尋其他可能的組合</span><br><span class="line">            sum -&#x3D; nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result &#x3D;&#x3D; int.MaxValue ? 0 : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣以 [2,3,1,2,4,3] 為例，尋找的方式攤開來看就是<br>right = 0，sum(2) =&gt; 不符合</p><p>right = 1，sum(2, 3) =&gt; 不符合</p><p>right = 2，sum(2, 3, 1) =&gt; 不符合</p><p>right = 3，sum(2, 3, 1, 2) =&gt; 長度為 4<br>　　並且透過 while 嘗試在<code>固定停止位置</code>(2)的情況下，變更<code>起始位置</code>來檢查其他組合是否符合條件。<br>　　left = 1，sum(3, 1, 2) =&gt; 長度為 3<br>　　left = 2，sum(1, 2) =&gt; 不符合，停止 while 繼續下一輪 for</p><blockquote><p>此處補充一下，在 while 條件不符合後，之所以不用再調整 left 確認其與當前 right 之間是否還存在 &gt;= 7 的組合，是因為條件限制 Array 僅包含正整數，也就是說如果 sum 的結果已經小於 target，那再減掉一個正整數也不可能會大於 target。</p></blockquote><p>right = 4，sum(1, 2, 4) =&gt; 長度為 3<br>　　並且透過 while 嘗試在<code>固定停止位置</code>(4)的情況下，變更<code>起始位置</code>來檢查其他組合是否符合條件。<br>　　left = 3，sum(2, 4) =&gt; 不符合，停止 while 繼續下一輪 for</p><p>right = 5，sum(2, 4, 3) =&gt; 長度為 3<br>　　並且透過 while 嘗試在<code>固定停止位置</code>(3)的情況下，變更<code>起始位置</code>來檢查其他組合是否符合條件。<br>　　<strong>left = 4，sum(4, 3) =&gt; 長度為 2</strong><br>　　left = 5，sum(3) =&gt; 不符合，停止 while，並且 for 也結束了</p><p>最後會 return <code>2</code></p><p>此解法包含了一個 while，乍看之下時間複雜度也很像 <code>O(n^2)</code>，但其實每個元素除了最外層的 for 操作到一次後，剩下就是變更<code>起始位置</code>時會再操作到一次，所以時間複雜度為 2 * n，也就是 <code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> squares-of-a-sorted-array </tag>
            
            <tag> minimum-size-subarray-sum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 筆記 - Array</title>
      <link href="2022/10/26/leetcode-array/"/>
      <url>2022/10/26/leetcode-array/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul><li>704: Binary Search</li><li>27: Remove Element</li></ul><h1 id="704-Binary-Search"><a href="#704-Binary-Search" class="headerlink" title="704. Binary Search"></a>704. Binary Search</h1><p><a href="https://leetcode.com/problems/binary-search">https://leetcode.com/problems/binary-search</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</span><br><span class="line"></span><br><span class="line">You must write an algorithm with O(log n) runtime complexity.</span><br></pre></td></tr></table></figure><p>Example1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p>Example2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1 &lt;&#x3D; nums.length &lt;&#x3D; 104</span><br><span class="line">- -104 &lt; nums[i], target &lt; 104</span><br><span class="line">- All the integers in nums are unique.</span><br><span class="line">- nums is sorted in ascending order.</span><br></pre></td></tr></table></figure><h2 id="知識點"><a href="#知識點" class="headerlink" title="知識點"></a>知識點</h2><p>雖然題目直接寫明了 binary search，但在使用時還是得注意</p><ol><li>array 是否已經排序?</li><li>array 是否有重複元素?</li></ol><p>再來要思考的就是邊界條件到底要怎麼寫?</p><ol><li>left index 與 right index 要用<code>小於</code>還是<code>小於等於</code>?</li><li>middle value &gt; target 時，right index 要改為 <code>middle</code> 還是 <code>middle - 1</code>?</li><li>middle value &lt; target 時，right index 要改為 <code>middle</code> 還是 <code>middle + 1</code>?</li></ol><p>簡單來說，如果 index 區間是 <code>[left, right]</code>，則</p><ul><li>middleValue &gt; targetValue 時，<code>rightIndex = middle - 1</code>，因為當下之 middleValue 已經不會是 targetValue 了，所以下一輪的 right 邊界不用在包含它。</li><li>middleValue &lt; targetValue 時，<code>leftIndex = middle + 1</code>，因為當下之 middleValue 已經不會是 targetValue 了，所以下一輪的 left 邊界不用在包含它。</li></ul><p>反之若 index 區間是 <code>[left, right)</code>，則</p><ul><li>middleValue &gt; targetValue 時，因為右邊界不包含，<code>rightIndex = middle</code>。</li><li>middleValue &lt; targetValue 時，<code>leftIndex = middle + 1</code>。</li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>個人比較習慣 <code>[left, right]</code> 的寫法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Search</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.Count() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>另外一個是 <code>[left, right)</code> 的版本</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Search</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> target</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> right = nums.Count();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27: Remove Element"></a>27: Remove Element</h1><p><a href="https://leetcode.com/problems/remove-element/">https://leetcode.com/problems/remove-element/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.</span><br><span class="line"></span><br><span class="line">Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</span><br><span class="line"></span><br><span class="line">Return k after placing the final result in the first k slots of nums.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</span><br></pre></td></tr></table></figure><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,2,3], val &#x3D; 3</span><br><span class="line">Output: 2, nums &#x3D; [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k &#x3D; 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2</span><br><span class="line">Output: 5, nums &#x3D; [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your function should return k &#x3D; 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned in any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p>Constraints:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;&#x3D; nums.length &lt;&#x3D; 100</span><br><span class="line">0 &lt;&#x3D; nums[i] &lt;&#x3D; 50</span><br><span class="line">0 &lt;&#x3D; val &lt;&#x3D; 100</span><br></pre></td></tr></table></figure><blockquote><p>ps. 不需要考慮陣列中超出新長度後面的元素。</p></blockquote><h2 id="知識點-1"><a href="#知識點-1" class="headerlink" title="知識點"></a>知識點</h2><p>要記得 array 在記憶體中的位址是連續的，不能單獨刪除陣列中的某個元素，只能覆寫。</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>時間複雜度: <code>O(n^2)</code><br>空間複雜度: <code>O(1)</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveElement</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> count = nums.Count();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 找到需要移除的元素，將其餘元素往前移動一位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt; count - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// j &lt; count - 1: 當最後一個元素往前移，則原本意義上的最後一個元素就不處理了</span></span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 因為元素往前一位，所以 i 也往前一位</span></span><br><span class="line">            i--;</span><br><span class="line">            <span class="comment">// 陣列數量 - 1</span></span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="雙指針法"><a href="#雙指針法" class="headerlink" title="雙指針法"></a>雙指針法</h3><p>時間複雜度: <code>O(n)</code><br>空間複雜度: <code>O(1)</code></p><p>可以理解為，建立一個新陣列(實際使用同一個)，並且在迭代過程中將 <code>val</code> 以外的元素都依序放入這個新陣列。<br><code>新陣列</code>(實際使用同一個)使用的 index 為 <code>slowIndex</code>，從 0 開始，並且只有在寫入元素後才會 + 1。<br><code>舊陣列</code>(實際使用同一個)使用的 index 為 <code>fastIndex</code>，如果當前值不等於 <code>val</code>，則會將該值(<code>nums[fastIndex]</code>)放入新陣列。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveElement</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> fastIndex = <span class="number">0</span>; fastIndex &lt; nums.Count(); fastIndex++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fastIndex] != val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">            <span class="comment">// 只有在寫入新值時才會 + 1</span></span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-search </tag>
            
            <tag> remove-element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET 專案設定多個目標框架</title>
      <link href="2022/07/22/targetframeworks-setting/"/>
      <url>2022/07/22/targetframeworks-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>遇到一個需求是要建立兩個不同版本的 Web API 進行測試，他們會參考到某個類別庫 A。</p><p>但為了嚴謹性，希望 NET 6 參考到的類別庫也是使用 NET 6，而不是較低的版本如 NET 3.1 或 NET Standard；反之 NET 3.1 的 Web API 也是希望使用框架目標為 NET 3.1 的類別庫 A。</p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>簡單紀錄一下調整的過程。</p><h2 id="調整-csproj"><a href="#調整-csproj" class="headerlink" title="調整 csproj"></a>調整 csproj</h2><p>打開類別庫 A 的 csproj</p><blockquote><p>Tips: 在 VS 中可以直接在方案總管中對專案點兩下打開 csproj 設定檔。</p></blockquote><p>將 TargetFramework 加上「s」，然後就可以在「;」後面加上想要支援的版本。</p><blockquote><p>引用該類別庫的專案，會自動選擇能夠兼容的最高版本。</p><p>例如: NET 6 API 專案引用類別庫時，雖然可以用 NET 3.1 也可以用 NET 6，但會自動選擇 NET 6。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;PropertyGroup&gt;</span><br><span class="line">    &lt;TargetFrameworks&gt;netcoreapp3.1;net6.0&lt;&#x2F;TargetFrameworks&gt;</span><br><span class="line">&lt;&#x2F;PropertyGroup&gt;</span><br></pre></td></tr></table></figure><p>具體可用的版本號可參考 <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-frameworks">supported-target-frameworks</a></p><p>調整後 build 出的兩個版本</p><p><img src="/image/XutLuQk.png" alt="Image"></p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>如果不同的 .NET 版本想引用不同的套件，或者是某些套件只能在特定的 .NET 版本上運行時，也可以在 csporj 裡面設定 PackageReference。</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup Condition&#x3D;&quot;&#39;$(TargetFramework)&#39; &#x3D;&#x3D; &#39;net6.0&#39;&quot;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.Common.Context&quot; Version&#x3D;&quot;6.0.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.Common.Values&quot; Version&#x3D;&quot;6.0.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.AccessLog.EFCore&quot; Version&#x3D;&quot;6.0.0&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ItemGroup&gt;</span><br><span class="line"></span><br><span class="line">&lt;ItemGroup Condition&#x3D;&quot;&#39;$(TargetFramework)&#39; &#x3D;&#x3D; &#39;netcoreapp3.1&#39;&quot;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.Common.Context&quot; Version&#x3D;&quot;1.5.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.Common.Values&quot; Version&#x3D;&quot;1.6.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;PackageReference Include&#x3D;&quot;Data.AccessLog.EFCore&quot; Version&#x3D;&quot;1.7.0&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ItemGroup&gt;</span><br></pre></td></tr></table></figure><h2 id="Conditional-compilation"><a href="#Conditional-compilation" class="headerlink" title="Conditional compilation"></a>Conditional compilation</h2><p>如果某些 Code 只想在某個版本上的 NET 上跑，可以使用預處理器指示詞來控制<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation">條件式編譯</a>。</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public string Platform &#123;</span><br><span class="line">   get &#123;</span><br><span class="line">#if NET6_0</span><br><span class="line">      return &quot;.NET 6&quot;</span><br><span class="line">#elif NETCOREAPP3_1</span><br><span class="line">      return &quot;.NET 3&quot;</span><br><span class="line">#else</span><br><span class="line">#error This code block does not match csproj TargetFrameworks list</span><br><span class="line">#endif</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多前置處理器符號可參考 <a href="https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#preprocessor-symbols">Preprocessor Symbols</a>。</p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> targetframeworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於談判二三事</title>
      <link href="2022/07/19/negotiation/"/>
      <url>2022/07/19/negotiation/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這半年來因為工作與房子的事情有了許多「談判」的機會，原本以為自己還算會溝通，但直到坐上「談判桌」才發現談判與溝通能力完全是兩碼子事，不會談判的自己在當下如同誤入叢林的小綿羊，沒有任何保護自己的能力，或者是說，也不知道該如何保護自己。</p><p>日前拜讀了劉必榮教授的談判技巧，受益良多，過程中紀錄了一些談判原則想要分享給和我一樣沒什麼談判經驗的讀者。</p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><blockquote><ol><li>本文沒有任何商業合作，僅是個人筆記分享，如有侵權請告知。</li><li>接下來的內容會以條列的形式呈現，不會脈絡化的解釋每個原則。</li></ol></blockquote><h2 id="關於談判"><a href="#關於談判" class="headerlink" title="關於談判"></a>關於談判</h2><ul><li>談判本質是交換，不是贏者全拿、輸者全輸。</li><li>辯論贏對方的嘴、談判贏對方的心。</li><li>談判只是解決問題的方式，不用拿出上戰場殺敵的氣勢。</li></ul><h2 id="談判的人與事"><a href="#談判的人與事" class="headerlink" title="談判的人與事"></a>談判的人與事</h2><ul><li>搞清楚雙方各自要的是什麼。<ul><li>What do you want?</li></ul></li><li>（承上）列出<ul><li>must：你不能讓步的。</li><li>want：你想要的，但可以視情況用來交換或放棄。</li><li>give：可有可無、給對方也無所謂。</li></ul></li><li>搞清楚要跟誰談，一家公司裡面，不同的人要談不同的東西。</li><li>A 和 B 有交情，和 A 談沒籌碼，可以想辦法把 B 拉進來。<ul><li>牽扯多方的時候，若對方內部有衝突，不要亂同情、表態，有些東西是不能搭話的。</li></ul></li><li>視情況把「情」加進去，搞清楚關係是「助力」還是「阻力」，關係是「手段」還是「目的」。</li><li>人和事是相互影響的，人會帶進事，事會帶進人，人、事一改變，籌碼就改變。<ul><li>不想扯進這個人，就不要談這個事。</li><li>反過來，要拉這個人進來增加自己的籌碼，就要想辦法談這個事。</li></ul></li></ul><h2 id="談判的籌碼"><a href="#談判的籌碼" class="headerlink" title="談判的籌碼"></a>談判的籌碼</h2><ul><li>籌碼的定義：跟我談他得到什麼（效益），不跟我談他損失什麼（成本）。<ul><li>要增加籌碼，可以選擇「加碼」和「加壓」。</li><li>我有什麼東西是他想要的?<ul><li>金錢、物質、空間、資訊、專業、人力、人脈、通路、能力、行為。</li><li>EX：以「行為」加壓 =&gt; 「要先哭，才能要求不哭給糖」。</li></ul></li></ul></li><li>在「這個時候」跟「這個人」談「這個事」前，記得想想己方有什麼籌碼。<ul><li>時間：錯過他最想要的時間，籌碼就打折了。</li><li>人：他和他的公司（團體）其實角度不會相同。</li><li>事件：談判中的權力是「議題權力」，不是「整體權力」，談不同的事，籌碼不同。</li><li>如果我跟這個人談沒有籌碼，那我認識的人有沒有?</li></ul></li><li>籌碼的使用方式：給他為賞、不給為罰。搭配議題掛勾使用。<ul><li>談 A 事件沒什麼籌碼，但 B、C 有，可以說給我 A 那我給你 B + C。</li><li>反過來，你不給我 A 我就不給你 B、C。</li></ul></li></ul><h2 id="說服的技巧"><a href="#說服的技巧" class="headerlink" title="說服的技巧"></a>說服的技巧</h2><ul><li>怎麼讓對方「想要」我們的「籌碼」。</li><li>從以下角度切入：對錯 （<strong>不要使用</strong>）、利害 （好用）、得失。</li><li>利害<ul><li>EX：從成本效益去剖析「利害」<ul><li>「你」堅持立場的成本很高、「你」堅持立場的效益很低</li><li>「我」堅持立場的成本很高、「我」堅持立場的效益很高 =&gt; 告訴對方我不可能讓步。</li><li>「我」堅持立場的成本很低 =&gt; 告訴對方我可以跟你耗時間。</li></ul></li><li>利害說服的比重：70% 利、30% 害。<ul><li>害為「創造不確定性」，讓對方有無限想像空間。<ul><li>EX：雖然對方銀行利率比較好，但你要把雞蛋都放在同一個籃子裡面嗎?</li></ul></li><li>記得說故事，用故事包裝，讓對方買單。</li></ul></li><li>得失，談判桌上一定要讓對方「覺得」他得的多。<ul><li>談判桌上只能有一個笨蛋，那就是我們自己。如果對方覺得他是那個笨蛋，就沒有下次。</li><li>人的「覺得」很容易控制，人會以中數、中線來判斷自己有沒有談好。</li><li>讓自己讓過中數，我方開 8000、對方 7000，最後 7300 成交，對方覺得賺，但我成本 6000。</li></ul></li></ul></li></ul><h2 id="如何準備談判"><a href="#如何準備談判" class="headerlink" title="如何準備談判"></a>如何準備談判</h2><ul><li>要有足夠的證據支撐我們的立場。<ul><li>進有依據、退也不會讓對方覺得我們示弱。</li></ul></li><li>要創造談判的空間，不要把門鎖死。<ul><li>上桌是談判，不是要東西或投降的，要留點迴旋空間。</li><li>談判不是非黑即白的，否則不可能雙贏。</li><li>對方願意談，除了成本效益分析以外，他必須覺得談判是談的通的。<ul><li>EX：對方說價格能降嗎，我方說可以…但… （Yes, but）</li></ul></li><li>善用方案組合<ul><li>雙方最大化的拿取自己想要的。<ul><li>A 拿到，B、C 就不要。A 沒拿到，就改要 B + C。</li></ul></li><li>談判不要被強迫二選一，Yes、No 可以不接招，改提自己的方案組合。</li></ul></li></ul></li><li>確認談判的時機<ul><li>現在是不是談這件事的最好時候?</li><li>誰比較急、誰有時間等?<ul><li>就算自己比較急，也可以虛張聲勢，假裝自己要的是錢，不要急著掏心掏肺。</li></ul></li></ul></li><li>萬一沒談成，有什麼備案?</li></ul><h2 id="出牌的策略"><a href="#出牌的策略" class="headerlink" title="出牌的策略"></a>出牌的策略</h2><ul><li>先談哪一個?<ol><li>從簡單談起，建立互信。</li><li>有數個議題，可以切割包裝，試探對方要的是什麼，看哪個門是封死的，哪個是虛掩，再從那個議題追下去。</li><li>從最難談起，向對方表示我不會閃避這個問題。</li><li>拼圖法，先談大架構，再填細節。<ul><li>雙方從無到有，展開合作的時候，可以用這種方式開始談。</li></ul></li></ol></li><li>如何出牌?<ul><li>談大的、困難的、重要的議題，可以「硬出牌」、開高。</li><li>談容易的、簡單的，可以「軟出牌」、開低，誘敵深入。</li><li>拼圖式談判，可以選擇「開平」。</li><li>硬出牌：帶目標上桌，提出我想要的，但記得不要把話說死。<ul><li>有行情的話，先出牌、先引導。</li><li>就算不能一下就贏，也能有定錨效果。</li><li>我們對於成交價的期待，經常受到對方開價所操縱。</li><li>不要怕破局，開高走低，先破後立也是談判的戰術。</li><li>達成協議和引爆衝突是不矛盾的。</li><li>談事情:<ul><li>EX：開 A 對方拒絕、換 B 對方拒絕、再 C 對方不好拒絕，成交，但我們的目標本來就是 C。</li><li>閉門羹戰術，等待對方說 No，我再降低，突顯我方善意，以及讓步的上道。</li></ul></li><li>談數字:<ul><li>不能用閉門羹方法，讓對方一直砍價格，下次就只會從砍完的數字再砍。</li><li>要改這樣談<ul><li>原本 1000 直接說成本上漲，要變 1500，讓對方完全無法接受，然後再說，不然王先生，你看這樣好不好，我回去跟老闆爭取一下，爭取 1300 你有辦法接受嗎?</li></ul></li><li>反過來也可以，從 1000 慢慢往上漲，直到對方阻擋，但這樣太慢，不如直接引爆。</li></ul></li></ul></li><li>軟出牌：帶底線上桌，提出我認為他能接受的。<ul><li>讓對方貪圖小利，藉由累積小 Yes，最終收穫大 Yes。 </li></ul></li></ul></li></ul><h2 id="談判桌上的拆招"><a href="#談判桌上的拆招" class="headerlink" title="談判桌上的拆招"></a>談判桌上的拆招</h2><ul><li>對方先出牌的應對方式<ul><li>Yes、No、還價、不回應。</li><li>搞清楚誰有求於誰，可以直接說 No。</li><li>如果我們不想答應，可以不回應、裝死、裝傻。<ul><li>好的沒問題，我會往上呈報，但實際沒有。</li><li>推給人事決策緩慢。</li><li>問 A 答 B 擦邊球。</li></ul></li><li>如果不好拒絕、不回應，可以「還價」，提自己的解決方案 If、No, but…。<ul><li>要小心不要讓出談判桌上的詮釋權。<ul><li>對方開 500，你沒有還價，對方就說，好啦 450，那我讓 50 了，你讓什麼?</li><li>對方開 500 你可以開 200，對方讓，你也可以跟著讓。</li></ul></li><li>要小心假讓步，他拿嘴裡的，換你手裡的。<ul><li>勞資開會，勞方要求加薪 2000，最後 800，但對方實際讓 0。</li></ul></li></ul></li><li>如果必須得說 Yes，得先判斷對方的目的。<ul><li>如果事情對我們不重要，對他可能也不重要，但他卻在這問題上纏鬥。那我們可以在纏鬥幾次後突然答應對方，然後要求對方在另外一個問題上讓步。<ul><li>記得不要在小東西上纏鬥，不要什麼都不讓，這只會讓對方反過來利用。</li></ul></li><li>如果事情對雙方都很重要，對方算準我們不可能讓，但如果我有辦法在戰略上調整，現在可以讓了，這時候可以一下子開門，突然讓給他，破壞他後面的整個戰略設計。</li></ul></li></ul></li><li>讓步的準則：「<strong>幅度遞減、次數少、速度慢</strong>」，讓對方知道你的底線 （不論真假）。<ul><li>幅度遞減：開價 100，100 &gt; 80 &gt; 70 &gt; 65。</li><li>次數少：總共只能讓 3 - 5 次，一次讓 20 萬，和讓 10 次 2 萬，完全不一樣。</li><li>速度慢：不要太早讓步，對方會覺得有詐、你有本錢。不要想著早早讓完，早早回家。往往是早早讓完，就回不了家。</li></ul></li></ul><h2 id="談判的中場戰術"><a href="#談判的中場戰術" class="headerlink" title="談判的中場戰術"></a>談判的中場戰術</h2><ul><li>談判的節奏：開場、中場、收尾。</li><li>談判除了出牌、拆招，但談判的節奏一樣重要。<ul><li>節奏快一點，希望趕快談成。</li><li>節奏慢一點，希望拖一點時間，像是等待新買家出現、等待法案通過。<ol><li>我方人事改變，決策延後。</li><li>議程戰術<ul><li>把原本沒有要談的議程加入。</li><li>議程中間加入一個困難的先決條件，讓對方必須解決這個，才能往下談。</li><li>每次見面，決定下次的談判時間，如果想拖時間，就訂遠一點的日期。</li></ul></li><li>談判技巧<ul><li>黑臉戰術，談判出現一堵牆。<ul><li>EX：100 元，對方殺 90，同意後又殺 85。這時可以說要回去請示一下，隔天和對方說，大哥昨天差點被你騙了，忘記有個數字沒算到，90 沒辦法賣啦，要 95，對方可能說什麼 95 就 90，而且再也不會提 85。</li></ul></li><li>用「小結」節外生枝。<ul><li>小節可以搭配「拖時間」，那我們目前談的議題，雙方決定這樣這樣…，這時候對方可能會突然多出很多意見，就可以重新回去談剛剛那個議題。</li><li>小節可以搭配「鼓勵」，跟對方說，原本有 ABCDE，現在解決了 AB，讓對方覺得談判是有進展的，不會覺得談不動。</li><li>小節可以搭配「澄清」，避免雙方沒共識，但對方出去亂講說雙方有一些共識，導致其他備胎聽到就跑了。所以真的沒共識，可以和對方說，談到現在我們雙方的共識，就是沒共識。</li></ul></li><li>切臘腸戰術，慢慢切，每次給一些讓步。<ul><li>但要記得此戰術的目的是拖時間，和讓步準則想要讓對方知道你的底線是完全不同的目的。</li></ul></li></ul></li></ol></li></ul></li></ul><h2 id="談判的解題模型"><a href="#談判的解題模型" class="headerlink" title="談判的解題模型"></a>談判的解題模型</h2><ul><li>把餅做大：「您有沒有想過，我們可以把一起把餅做大?」<ul><li>向對方表示我方沒有敵意。</li><li>可以引導對方往整合型談判的方向思考。</li><li>注意：想多分一點 =&gt; 就要做大一點，不能反做來講，做大一點 =&gt; 就多分一點。</li></ul></li><li>交集法<ul><li>What do you want?</li><li>看似衝突的情況，真正釐清雙方在乎的需求後，或許能得到一個交集。</li></ul></li><li>掛勾法<ul><li>給我 A，我給你 B、C。</li></ul></li><li>切割法<ul><li>談判的標準動作。</li><li>切的越細，手上的牌越多組合，談判的空間越大。</li></ul></li><li>分解法<ul><li>數個議題，只要談不攏的不是關鍵議題，那就擱置，先達成其他的協議。</li></ul></li><li>階梯法<ul><li>漸進、階段式的談雙方該拿到的利益。</li><li>對雙方最公平，尤其是雙方缺乏互信、對未來認知不同時，可以使用。</li><li>EX：訂單量達到 100，獎金 1%，之後達到 200、獎金 1.5%。</li></ul></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li>什麼是談判<ul><li>決策：要不要上桌、要不要下桌，都是決策過程。</li><li>思維：怎麼拆招。</li><li>素養：增進比彼此利益。<ul><li>贏者不全贏、輸者不全輸。</li></ul></li></ul></li><li>雙贏<ul><li>談判求雙贏，但<strong>雙贏不等於均分</strong>。</li><li>切割法，彼此都拿一些，每個人贏不同的東西。</li><li>談判必須相信能夠雙贏，才能努力找到任何雙贏的機會。</li><li>「雙贏不會從天上掉下來」，談雙贏都是談輸的人講的，贏的人常常骨子裡想的是獨贏，所以就需要「談判」，找到自己的籌碼，讓對方知道自己也有求於你，願意坐下來談。</li><li>EX：圖書館裡有兩個人坐窗邊，一個怕熱一個怕冷，一個想開窗、另外一個不肯，雙方吵不完，管理員來了，他說隔壁桌還有一個窗戶可以打開，這樣風吹進來，怕熱不至於熱死，怕冷不至於冷死。「<strong>最終是否要開那扇遠窗，難點在於兩位學生是否願意接受這樣的結果，是否願意雙贏，如果有其中一個學生沒有這素養、沒有雙贏的概念，那就破局。</strong>」</li></ul></li><li>談判是讓事情「成為可能」，而不是打仗。<ul><li>談判不能夠有潔癖，不能求全贏，不然往往不能成功任何事。</li><li>怎麼讓事情成為可能，就有某種程度的妥協。</li><li>人們擁有的只是自己的價值觀，沒有人能夠代表真理，而你既然不能壟斷真理，你講的也不必然都對，只是你覺得適合你自己，那就有妥協的空間。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Relationship </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>玩轉 Fiddler－HTTP(s) 抓包能手 &amp; 常見「特殊」用途</title>
      <link href="2021/08/23/fiddler/"/>
      <url>2021/08/23/fiddler/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你是否曾經有這些困擾呢?</p><ol><li>戳 API 想要修改前端 Request 送出去的 JSON，但 JS 被 uglify 很難追、或是開 Postman 但要處理認證、授權、和整包 JSON 很麻煩。</li><li>承上，想看的是 UI 與 JS 後續行為，Postman 愛莫能助。</li><li>想測試後端驗證，但前端已經有驗證，想測試還要先拔掉前端驗證的 code。</li><li>在 Local 調整完檔案（HTML、CSS、JS、Image…etc），想上到<strong>正式環境</strong>測試一下效果，但又不想真的改到正式環境的檔案?</li><li>修改 Response 回傳的資料（EX: 修改<strong>後端 API</strong> 回傳的使用者權限、查詢結果、新增成功與否…etc，導致前端畫面上的變化）。</li><li>IDE 都可以下中斷點，不管啦，我的每個 HTTP Request &amp; Response 也要可以下中斷點，即時查看、修改、決定要不要 drop 掉封包。</li></ol><p>如果有任一個需求符合，用 Fiddler 就對了!</p><blockquote><p>PS. 以下文長慎入，可以選擇自己需要的內容閱讀就好。</p></blockquote><h2 id="本文內容："><a href="#本文內容：" class="headerlink" title="本文內容："></a>本文內容：</h2><ol><li>什麼是 Fiddler，和 Postman、Wireshark 的差異?</li><li>實際抓包操作 &amp; 過濾不需要的內容</li><li>設定 AutoResponder 自訂（修改）回傳內容</li><li>中斷每個 Request 或 Response 的方法</li><li>實戰演練，Fiddler 抓不到特定應用程式的封包？</li><li>介紹一些「特殊」的用途（未經許可下，不要做出侵害他人權利之行為）</li></ol><h1 id="什麼是-Fiddler"><a href="#什麼是-Fiddler" class="headerlink" title="什麼是 Fiddler"></a>什麼是 Fiddler</h1><p>老樣子，我們先看<a href="https://zh.wikipedia.org/wiki/Fiddler">維基百科</a>的定義</p><blockquote><p>Fiddler 是一個用於 HTTP 調試的代理伺服器應用程式</p></blockquote><p>也就是說，他能夠抓取並記錄 HTTP 流量，而 HTTPS 也可以利用自簽名證書實現 Man-in-the-middle attack 進行記錄。</p><h2 id="運作流程"><a href="#運作流程" class="headerlink" title="運作流程"></a>運作流程</h2><p><img src="/image/eC9mrmw.png" alt="Image"></p><p>Client 與 Server 之間的 Request 和 Response 都將經過 Fiddler，由 Fiddler 進行轉發，此時他以代理伺服器的方式存在。</p><p>白話一點來講，可以把圖中的 Fiddler 當成送信的郵差，只要他願意，他可以偷看寄件者寫了什麼東西，甚至是串改信件內容，而收件者回信時，也可以偷看&amp;串改。</p><h2 id="常見工具比較"><a href="#常見工具比較" class="headerlink" title="常見工具比較"></a>常見工具比較</h2><ol><li>Wireshark：擷取各種網路封包，除了 HTTP，也可以看其他協議如 TCP、UDP、Socket…etc。</li><li>Postman：用於調試 API，能夠發送 HTTP 請求與接收回傳結果。</li><li>瀏覽器開發者工具：單純只看 Network 的話，也可以擷取 HTTP Request &amp; Response</li><li>Fiddler：能夠像 Postman 單純發送請求、也可以擷取 HTTP 流量、但是多了一個攔截修改封包的功能</li></ol><p>該用何者工具主要還是要依照當下的需求，如果你只是想看 Request &amp; Response 到底收發了什麼東西，直接 F12 開起來看，簡單快速。</p><p>如果是想要調試 API，雖然 Fiddler 也可以做到，但 UI/UX 與相關功能的完整性，還是 Postman 會好一些。</p><p>如果是要對封包進行截取、重發、編輯等等操作，或是要側錄手機上 APP 的封包，則使用 Fiddler。</p><h2 id="Fiddler-版本"><a href="#Fiddler-版本" class="headerlink" title="Fiddler 版本"></a>Fiddler 版本</h2><p>這邊說的 Fiddler 以及接下來的示範，都會使用 Fiddler Classic 版本。</p><ol><li><p>Fiddler Classic：只能在 Windows 執行，免費使用，功能齊全，但介面對新手比較不友善。<br><img src="/image/UMDdyXQ.png" alt="Image"></p></li><li><p>Fiddler Everywhere：跨平台，介面友善，一樣能夠修改封包內容，但沒辦法中斷請求以便即時修改，只能設定好 AutoResponder 來修改內容，在 2021/06/29 <a href="https://www.telerik.com/support/whats-new/fiddler-everywhere/release-history">V2.0 發布後</a>，沒有辦法再免費使用（V1.X 是可以免費使用，但也可以付費獲取更多功能）。<br><img src="/image/UQZgIER.png" alt="Image"></p></li></ol><p>順便提一下歷史背景，2003 年 Fiddler 誕生，在 2012 年被 Telerik 收購，原作者在 2015 年離開 Telerik 跑去 Google，所以 2015 年之後就是由 Telerik 繼續開發，然後 2018 年發布第一版的 Fiddler Everywhere。</p><p>與 Fiddler 相似的抓包工具，還有大名鼎鼎的 BurpSuite（抓包應該只能算他的其中一個功能，他是以測試網路應用程式安全性為主，有興趣的可以去載來玩玩看，有閹割過的免費社群版可以用，喜歡的話也可以購買專業版，只是價格很高就是了，一年 399 美金，而且沒辦法買斷），如果是 Mac 或 Linux 的話可以考慮 Charles（功能和 Fiddler 差不多，只有試用版，期限到了要購買，價格約 50 美金，沒有大版本更新都可以一直使用）</p><p>此處提到軟體的金額以及是否有免費的社群版，以撰文當下時間為主，未來若更新，請以各軟體公告為主。</p><p>若是軟體有幫助到你，而價錢也可以接受的話，與其花時間找其他免費的替代方案，不妨可以直接付費支持，讓作者未來繼續開發新功能。</p><h1 id="實際操作"><a href="#實際操作" class="headerlink" title="實際操作"></a>實際操作</h1><p>講了那麼多，來看一下怎麼使用吧。</p><h2 id="安裝信任憑證-Trust-root-certificate-以擷取-HTTPS-流量"><a href="#安裝信任憑證-Trust-root-certificate-以擷取-HTTPS-流量" class="headerlink" title="安裝信任憑證(Trust root certificate)以擷取 HTTPS 流量"></a>安裝信任憑證(Trust root certificate)以擷取 HTTPS 流量</h2><p>想要抓取 HTTPS 流量的話，要先進行以下設定</p><p><img src="/image/LpuHmfC.png" alt="Image"></p><p><img src="/image/tB5aLDi.png" alt="Image"></p><p>接著一路確定，到最後安裝完成就會看到成功的訊息</p><p><img src="/image/bvu41t9.png" alt="Image"></p><p>其餘設定則維持預設即可</p><p>比較可能會調整到的是預設監聽的 port，如果不想掛在 8866 上，可以自己修改。</p><p><img src="/image/4sJrxYr.png" alt="Image"></p><h2 id="開始抓包"><a href="#開始抓包" class="headerlink" title="開始抓包"></a>開始抓包</h2><p>可以按 F12，或是左上角的 File &gt; Capture Traffic，或者是點一下左下角紅色框框處(沒有在抓的時候什麼圖案都不會有，但還是可以點一下空白處啟動)，啟動會顯示 Capturing。</p><p><img src="/image/COFpcwG.png" alt="Image"></p><p>隨意開啟一個網頁，就會看到所有抓到的流量，左半邊是紀錄，點選 Request，可以在右半邊的 Inspectors 看到 Request &amp; Response 細節，包括 Headers、Cookie、Data…etc，其實就和瀏覽器的開發者工具差不多，可以很快上手。</p><p><img src="/image/hV4x1I7.png" alt="Image"></p><p>對 Request 按右鍵，也可以進行複製、儲存、重送、註解、highlight 等等操作。</p><p><img src="/image/fy3fJMT.png" alt="Image"></p><p>最上方的選單也有常用功能可以操作，像是如果想清空擷取紀錄，可以點一下 Go 旁邊的那個「X」。</p><p><img src="/image/UW1OwYH.png" alt="Image"></p><h2 id="過濾"><a href="#過濾" class="headerlink" title="過濾"></a>過濾</h2><p>開始抓包後，應該很快就會有一個困擾，設備上所有 HTTP 流量都會被記錄在上面，雜亂到難以查找，有時候你只是想看一個單一的網站、或是任何 Client 端的程式軟體，如果是這樣的話，可以設定 Filter 規則。</p><p>最基本的設定就是指定 Hosts，多個 Hosts 可以用「;」隔開。</p><p>進階一點的話，可以研究一下 Hosts 區塊下方的選項，像是可以指定哪個 Process 的流量、只顯示符合設定規則的 Request 或 Response、也能夠偵測到特定的 Request 就自動進中斷點（中斷點後面會講）。</p><p><img src="/image/p9YQNVV.png" alt="Image"></p><h2 id="調試-API"><a href="#調試-API" class="headerlink" title="調試 API"></a>調試 API</h2><p>如果想要像 Postman 那樣發請求，Fiddler 也是可以做到的。</p><p>切換頁籤到 Composer 即可，發送的請求也會出現在左邊區塊的紀錄裡面。</p><p><img src="/image/IHyd7Eh.png" alt="Image"></p><h1 id="修改封包"><a href="#修改封包" class="headerlink" title="修改封包"></a>修改封包</h1><p>介紹的時候有提到，Fiddler 就像是郵差一樣，可以修改寄件者與收件者的信件內容。</p><p>修改的方式如同 IDE 中斷點一樣，可以決定是要卡住 Request 還是 Response，卡住後可以修改裡面的內容，改完再放行。</p><p>進中斷點（以 Response 為例），可以修改原先預期回傳的內容，不管是 HTML、CSS、JS、JSON 都可以（紅 1），也可以修改回傳的 HTTP Status Code（紅 2），確定後，就點 Run to Completion（紅 3）讓封包繼續傳給 Client 端（EX: Browser）。</p><p><img src="/image/1p9juay.png" alt="Image"></p><p>除了修改內容或是 HTTP Status Code 以外，Choose Response 最下面有一個「Find a file」，點了之後可以選擇一個 Local 端的檔案，取代掉原本回傳的內容。</p><p>這個在開發測試滿好用的，像是你改了新的一版 JS，Local 簡單測試沒有問題後，想上到正式環境看一下效果，但又怕修改的 JS 有問題，那就可以考慮這種方法，連到正式機的網頁，然後攔截舊版 JS，替換成新的 JS。</p><p><img src="/image/KWl5dbR.png" alt="Image"></p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>如果想要把所有卡住的請求都直接放行，可以點快速功能中的「Go」</p><p><img src="/image/2HtjTOX.png" alt="Image"></p><h2 id="範例情境"><a href="#範例情境" class="headerlink" title="範例情境"></a>範例情境</h2><p>呼應一下<strong>前言</strong>提到的情境，都是下中斷點可以解決的。</p><p><strong>卡 Request</strong></p><ul><li>戳 API 想要修改前端 Request 送出去的 JSON，但 JS 被 uglify 很難追、或是開 Postman 但要處理認證、授權、和整包 JSON 很麻煩。</li><li>承上，想看的是 UI 與 JS 後續行為，Postman 愛莫能助。</li><li>想測試後端驗證，但前端已經有驗證，想測試還要先拔掉前端驗證的 code。</li></ul><p><strong>卡 Response</strong></p><ul><li>在 Local 調整完檔案（HTML、CSS、JS、Image…etc），想上到<strong>正式環境</strong>測試一下效果，但又不想真的改到正式環境的檔案?</li><li>修改 Response 回傳的資料（EX: 修改<strong>後端 API</strong> 回傳的使用者權限、查詢結果、新增成功與否…etc，導致前端畫面上的變化）。</li></ul><h2 id="中斷點設定方式"><a href="#中斷點設定方式" class="headerlink" title="中斷點設定方式"></a>中斷點設定方式</h2><p>中斷點有以下幾種設定方式：</p><ol><li>Global 層級下中斷點</li><li>設定 AutoResponder</li><li>QuickExec 打指令</li><li>Filter 簡單規則自動進中斷點</li></ol><h3 id="Global-直接開啟-Automatic-breakpoints"><a href="#Global-直接開啟-Automatic-breakpoints" class="headerlink" title="Global 直接開啟 Automatic breakpoints"></a>Global 直接開啟 Automatic breakpoints</h3><p>顧名思義，開啟後所有的 Request 或 Response 都會進入中斷點，在設定好 Filter 不會有太多不相干流量的情況下，也是滿好用的，不用在特別設定什麼規則。</p><p>開啟的方式可以選單點，或是 F11 快捷鍵。</p><p><img src="/image/n7Z8S2O.png" alt="Image"></p><p><img src="/image/1s5M74Z.png" alt="Image"></p><p>以 Before Request 為例，勾選後最下面的狀態欄是一個向上的箭頭，代表作用中。</p><p><img src="/image/gu1BzvL.png" alt="Image"></p><p>也可以點一下，變成 After Response，是一個向下的箭頭（很不明顯XD）。</p><p><img src="/image/22sLdkA.png" alt="Image"></p><h3 id="設定-AutoResponder"><a href="#設定-AutoResponder" class="headerlink" title="設定 AutoResponder"></a>設定 AutoResponder</h3><p>如果有這些情況，就可以用 AutoResponder。</p><ol><li>不想要無差別卡中斷點，只需要特定的 Request。</li><li>或是自動套用 Response 的修改設定。</li></ol><p>像是上面有提到的替換 JS，總不可能同一個 JS 檔案，每次重新整理網頁後，都要手動再選擇一次。</p><p>所以 AutoResponder 可以理解為，針對某個符合條件的網址，就按照寫好的規則自動修改它的 Response。</p><p><img src="/image/CJk6e2Q.png" alt="Image"></p><p>設定步驟</p><ol><li>切換到【紅 1】頁籤</li><li>勾選【紅 2】 啟用自訂規則</li><li>勾選【紅 3】很重要！它的意思是沒有符合條件的網址，會直接略過，否則那些不符合條件的請求都會無法送出。</li></ol><p><img src="/image/N4ti2xc.png" alt="Image"></p><ol start="4"><li>【紅 4】點選添加規則，會在【紅 5】出現，能夠設定的條件如下，可以寫正則式、指定 URL、指定 URL &amp; HTTP Method…etc。</li></ol><p>像是圖中範例，我直接寫一個網址也可以XD</p><p><img src="/image/WFEDZF0.png" alt="Image"></p><ol start="5"><li>最後就是設定要自動調整的 Response 內容了，和上面提到的差不多，可以選擇回傳的狀態碼，或是是想要回傳自訂檔案的話，點最後的「Find a file」。</li></ol><p><img src="/image/d8BlxwE.png" alt="Image"></p><p>如果是想要調整 Response 內容的話，點倒數第二個「Create New Response」，然後在跳出的視窗中，編寫你自己需要的 Response Headers、Cookies、JSON…etc。</p><p><img src="/image/bqh3Yka.png" alt="Image"></p><h4 id="補充-1"><a href="#補充-1" class="headerlink" title="補充"></a>補充</h4><p>如果你在 AutoResponder 想要的是，讓特定的 Request or Response 進中斷點，這也是可以做到的，只要選擇「bpu」或「bpafter」，前者是卡 Request，後者是 Response。這樣只要符合條件的請求，就會如同上面提到的 Global 中斷點那樣，可以即時操作修改。</p><p><img src="/image/fWb7GzK.png" alt="Image"></p><p>還有些有趣的選項也可以試試看，像是讓特定的請求 delay、drop、redirect。</p><h3 id="QuickExec-打指令"><a href="#QuickExec-打指令" class="headerlink" title="QuickExec 打指令"></a>QuickExec 打指令</h3><p>如果你當下只是要讓特定的 URL 進中斷點 Debug，除了上面提到的 Global 與 AutoResponder 以外，也可以考慮輸入指令的方式。</p><p>還記得上面提到的 <code>bpu</code>、<code>bpafter</code> 嗎?</p><p>其實可以把指令直接打在最下方的黑色框框中（QuickExec）</p><p><img src="/image/U2Q0kb5.png" alt="Image"></p><p>像是我要卡住指定 URL 的 Request 就可以這樣打，打完按下 Enter</p><p><img src="/image/RVoe1bB.png" alt="Image"></p><p>就會在右下角出現當前的指令 &amp; URL，如果想要清除指令的話，就再打一次 <code>bpu</code>，然後不要加任何 URL，這樣就能清空上一條指令了。 </p><p><img src="/image/CbaYuJo.png" alt="Image"></p><h4 id="補充-2"><a href="#補充-2" class="headerlink" title="補充"></a>補充</h4><p>其他支援的指令如下</p><p><img src="/image/jCD6gvu.png" alt="Image"></p><h1 id="Fiddler-抓不到特定應用程式的封包"><a href="#Fiddler-抓不到特定應用程式的封包" class="headerlink" title="Fiddler 抓不到特定應用程式的封包?"></a>Fiddler 抓不到特定應用程式的封包?</h1><p>到此為止，已經講述了如何配置 Fiddler 抓取 HTTP(s) 流量，並且搭配 Filters 與中斷點，讓開發更加方便。</p><p>預設抓取 <code>All Processes</code> 下，除了 Browser 以外，有些桌面應用程式的流量也有出現在 Fiddler，但有些卻沒有，這是怎麼回事呢?</p><p><img src="/image/XJbEZbb.png" alt="Image"></p><p><img src="/image/BAzIWMC.png" alt="Image"></p><p>這是因為除了 Browser 以外，其他能夠抓到的情況是</p><ol><li>程式使用 WinInet 函式庫發送 HTTP/HTTPS</li><li>程式內嵌 WebBrowser</li></ol><p>那如果你還是想要抓某個應用程式，只有兩個辦法</p><ol><li>看一下該應用程式有沒有提供代理伺服器設定<br><img src="/image/2IHwCj5.png" alt="Image"></li><li>沒有的話只能透過 Proxifier 之類的工具強制代理</li></ol><h2 id="實際演練"><a href="#實際演練" class="headerlink" title="實際演練"></a>實際演練</h2><p>我有購買一個影片，但影片被加密過，要用對方提供的特殊播放器，並且輸入正確的帳號密碼才能夠觀看。</p><p><img src="/image/gmomyBd.png" alt="Image"></p><p><img src="/image/QQOn1Q7.png" alt="Image"></p><p>但我遇到一個問題，影片是在本地端，並非線上串流，理論上我應該可以離線（斷網）觀看，但實際把網路關掉後，輸入正確的帳號密碼，卻無法播放，然後打開網路又可以正常播放，除了不方便以外，有時候就算有網路，伺服器還常常連不上…</p><p>至此猜測</p><ol><li>輸入的帳號密碼不會在軟體 Local 端計算解密 Key。</li><li>或者是 Key 是在本地端計算，但可能有其他功能，像是確認軟體版本號之類的，如果無法連上網，就沒辦法播放。</li></ol><p>有了猜想後，來抓包觀察一下，不出所料，什麼都抓不到，而且播放軟體並沒有提供代理設置的功能。</p><p><img src="/image/gI6WNFf.png" alt="Image"></p><p>那就只能用上面提到的 Proxifier 來強制幫他代理吧！</p><p>PS.</p><ol><li>礙於文章篇幅，不會再介紹 Proxifier 使用方式。</li><li>Proxifier 是要付費的，如果你不想付費，可以尋找其他同類型的工具。</li></ol><p>開啟 Proxifier 設定好規則</p><p><img src="/image/kGFQD2B.png" alt="Image"></p><p>選擇要代理的應用程式</p><p><img src="/image/34SMiCa.png" alt="Image"></p><p>接著再重新播放一次影片，可以看到 Fiddler 成功抓到播放器的封包</p><p><img src="/image/91vlvhY.png" alt="Image"></p><p>在 Response 的 JSON 裡，看到了 <code>play_key</code>，卡了一下中斷點，把其他資料都亂修改，只留下 <code>play_key</code> 還是可以正常播放，因此確定了上面的假設：「軟體是每次播放的時候都拿帳號密碼去戳 Server 取回解密影片的 Key」，但有趣的是，戳了好幾次 Server，每次拿回來的 Key 都一樣XD</p><p><img src="/image/ZzQ8dIK.png" alt="Image"></p><p>拿到 Key（只對我這部影片有效）之後，就來設定 AutoResponder 規則吧</p><p><img src="/image/ry0xZCB.png" alt="Image"></p><p>可以直接複製剛剛正常的 Response 貼進來就好</p><p><img src="/image/Y2rWxu3.png" alt="Image"></p><p>再來可以修改 hosts 讓播放器的網址隨便解析到一個 ip，反正只要連得上，都可以讓他的 Response 變成我們預先設定好的 JSON，如此一來，對方的 Server 不管有沒有啟用，對我們而言都不重要了。</p><h1 id="一些「特殊」的用途"><a href="#一些「特殊」的用途" class="headerlink" title="一些「特殊」的用途"></a>一些「特殊」的用途</h1><p>寫程式常常聽到一句話：「永遠不要相信使用者輸入的內容」，藉由這篇文章，應該更有體會了吧。</p><p>台灣某付費影視網站，曾經發生過只有前端 + API（丟影片 ID 去查） 驗證使用者有沒有權限觀看影片，影片 CDN 資源卻沒有再次驗證，導致修改掉 Request 送出去的影片 ID，就能夠訪問那些使用者無權觀看的影片。</p><p>不只影視網站，其他各式各樣你想的到的網站，可能後端都沒有好好驗，所以身為開發者的我們，請時刻保持警惕，不要心存僥倖。</p><p>說完了網站，那 APP 或桌面應用程式呢?</p><p>網站的每個 Request 很好查看，而 APP 和桌面應用程式乍看之下好像看不到他到底在做什麼，但使用 Fiddler 之類的工具也是原形畢露，有心人也常用來對 APP 進行</p><ol><li>去廣告（EX: 替換掉廣告 URL）</li><li>拿 VIP（EX: <code>&#123; IsVip: false =&gt; true &#125;</code>）</li><li>無限延長試用</li><li>任何 Server 端沒有好好驗的資源…</li></ol><p>除了這些主要功能（資源）放在 Server 端的還能夠阻擋，但如果主要功能（資源）是放在 Client 端的呢?</p><ol><li>某些 APP 的功能本來就在 Client 端實現（EX: 攝影 APP 付費後可以使用進階功能，但這個功能本來就在 APP 裡面，只要搞清楚他是怎麼判斷購買與否的，就無法阻擋。除非弄兩個版本，免費版裡面沒有付費功能，而進階功能要透過 App Stroe 購買才能下載專門的付費版本）</li><li>某速食報報…就不講得太露骨了</li></ol><p>你可能會想說，不會啦，要搞個 APP 還要開電腦抓包修改，太麻煩了。</p><p>但現在 Android、IOS 都有類似 Fiddler 的工具（不止單純抓包，也有 AutoResponder 的功能），連電腦都不用開了。</p><p>IOS 的話我自己是在用 <code>Thor</code>，Android 的話不熟，還請有使用過的人補充。</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>本文提供了一個 Web Debugging Proxy and Troubleshooting Solutions，日後開發遇到困難時，不妨也可以思考看看類似的工具能否幫助你更快排除障礙。</p><p>至於文末提到的那些情境，絕對不是倡導破解與非法存取，而是讓開發者們時刻警惕自己負責的專案有沒有類似問題，若不幸有人閱讀本文後去做出違反法律的事情，也與筆者無關，純屬讀者個人行為。</p>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http Proxy </tag>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>愛用瀏覽器自動填入? 小心個資外洩!</title>
      <link href="2021/06/20/security-risk-of-autofill/"/>
      <url>2021/06/20/security-risk-of-autofill/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>瀏覽器能夠儲存使用者經常填入的各種資訊，舉凡帳號、密碼、Email、姓名、電話、地址、信用卡資訊…等等。</p><p>帳號密碼可能不一定會儲存，但 Email、姓名、電話之類的個資，應該很多人會選擇讓瀏覽器記憶，避免每次填寫樸實又枯燥乏味的表單要一直重複輸入。</p><p>但是在理解瀏覽器 autocomplete 觸發機制後，你還敢直接填入你的資訊嗎?</p><p>以一個只有 Email 的表單為例，你以為只有填入 Email，實際上所有紀錄的個資，都可以被心懷不軌的網站拿到。</p><p>不囉嗦，直接弄個 Demo 網站看效果: <a href="https://ryanlee.tw/security-risk-of-autofill-demo">https://ryanlee.tw/security-risk-of-autofill-demo</a></p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>瀏覽器儲存的資訊看起來很多，但其實就是三個種類，以 Chrome 為例</p><p><img src="/image/qYskUcE.png" alt="Image"></p><ol><li><strong>密碼</strong>: 會綁定網站 Domain，只能夠自動填入相同網址下紀錄的帳密，所以不會發生 A 網站登入，卻填入 B 網站的帳密。</li></ol><p><img src="/image/TrngHLI.png" alt="Image"></p><ol start="2"><li><strong>付款方式</strong>: 儲存信用卡資訊(卡號、到期日、持卡人姓名)，要在 https 的網站下才會觸發自動填入。</li></ol><p><img src="/image/ft7dDbQ.png" alt="Image"></p><ol start="3"><li>(本文主要討論)<strong>地址和其他資訊</strong>: 國家、郵遞區號、地址、姓名、電話、Email。</li></ol><p><img src="/image/i10XPqF.png" alt="Image"></p><h2 id="autocomplete"><a href="#autocomplete" class="headerlink" title="autocomplete"></a>autocomplete</h2><p>那站在開發者的角度，該如何讓瀏覽器知道 input 可以填入什麼資訊呢?</p><p>其實很簡單，就設定 input 的 <code>name</code> 或 <code>autocomplete</code> attribute 就好</p><p><img src="/image/fQ8YXDo.png" alt="Image"></p><p>常見的 attribute 如下(<a href="https://developers.google.com/web/fundamentals/design-and-ux/input/forms">來源</a>):</p><table><thead><tr><th>Content type</th><th>name attribute</th><th>autocomplete attribute</th></tr></thead><tbody><tr><td>Name</td><td>name fname mname lname</td><td>name (full name)、 given-name (first name)、 additional-name (middle name)、 family-name (last name)</td></tr><tr><td>Email</td><td>email</td><td>email</td></tr><tr><td>Address</td><td>address city region province state zip zip2 postal country</td><td>For one address input: street-address、 For two address inputs: address-line1 address-line2、 address-level1 (state or province)、 address-level2 (city)、 postal-code (zip code)、 country</td></tr><tr><td>Phone</td><td>phone mobile country-code area-code exchange suffix ext</td><td>tel</td></tr><tr><td>Credit Card</td><td>ccname cardnumber cvc ccmonth ccyear exp-date card-type</td><td>cc-name cc-number cc-csc cc-exp-month cc-exp-year cc-exp cc-type</td></tr><tr><td>Usernames</td><td>username</td><td>username</td></tr><tr><td>Passwords</td><td>password</td><td>current-password (for sign-in forms)、 new-password (for sign-up and password-change forms)</td></tr></tbody></table><p>具體可看 WHATWG 制定的<a href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill">規範</a></p><h2 id="隱藏-input"><a href="#隱藏-input" class="headerlink" title="隱藏 input"></a>隱藏 input</h2><p>文章一開始的 Demo 網站，其實也只是設定好這些屬性，然後把他們「隱藏」起來。</p><p>至於該怎麼隱藏呢?</p><p>如果你試著把 input 設為 <code>display: none</code>、<code>visibility: hidden</code>、<code>input type=&quot;hidden&quot;</code> 這幾種，會發現瀏覽器不會自動填入他們。</p><p>但如果不要這種隱藏，而是調整成只有使用者看不到的那種隱藏，就可以了XD</p><p>把框線隱藏、長寬設為 0(還是會有一小點)、設定 margin 讓他直接超出螢幕。</p><p><img src="/image/TuwlhcI.png" alt="Image"></p><h2 id="危害範圍"><a href="#危害範圍" class="headerlink" title="危害範圍"></a>危害範圍</h2><p>Chrome、Edge、Safari 當你自動填入個資時，會順便填入所有能夠對應的個人資訊。</p><p>好消息是帳號密碼、付款方式各自獨立，所以不會填入。</p><p>至於 Firefox 也能夠自動填入，但它需要使用者逐個控制項選擇填入，所以不會發生上述問題。</p><p>以 Chrome 為例，根本不知道實際填入了哪些資訊</p><p><img src="/image/GNmKUGi.png" alt="Image"></p><p>儘管有些瀏覽器可能會顯示實際填入的資訊，但使用者會認真停下來幾秒鐘檢查的又有多少呢?</p><p>又或者，如果有紀錄多個 Email 的情況下，跳出了詳細資訊，大多也會以為瀏覽器顯示詳細訊息，是為了讓你分辨兩筆資料的差別吧…</p><h3 id="市佔率"><a href="#市佔率" class="headerlink" title="市佔率"></a>市佔率</h3><p>以 <a href="(https://netmarketshare.com/browser-market-share.aspx)">Net Applications 調查結果</a>來看</p><p>在 Desktop 下，Chrome 的使用率接近 7 成</p><p><img src="/image/jP6eZ3O.png" alt="Image"></p><p>在 Mobile 下，Chrome 的使用率也穩居 6 成</p><p><img src="/image/RSFTsSA.png" alt="Image"></p><p>顯然這個問題影響著很大一部份的使用者。</p><h2 id="防範措施"><a href="#防範措施" class="headerlink" title="防範措施"></a>防範措施</h2><p>那到底該如何避免不想要的資訊被網站拿走呢?</p><ol><li>只在信任的網站自動填入</li><li>乾脆不用自動填入，或是只記錄你覺得洩漏也無所謂的資訊</li><li>使用能夠幫助你檢查表單填入資訊的瀏覽器</li><li>送出表單前，檢查網頁原始碼</li></ol><p>不過最重要的準則還是只有一個，就是「不管帳號密碼、付款方式、個資，都只儲存你覺得洩漏也無所謂的資訊，不要覺得存在瀏覽器裡面很安全，要抱持著它總有一天會洩漏的心態來使用它」。</p>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
            <tag> autofill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core Model Binding 死活綁不上 - 1</title>
      <link href="2021/05/12/aspnetcore-model-binding/"/>
      <url>2021/05/12/aspnetcore-model-binding/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ASP.NET Core 的 Model Binding 基本上和 ASP.NET Framework 差不多，但實際接觸後，一開始用起來卻卡卡的XD</p><p>本文將紀錄一些當初以為理所當然，結果卻不是這麼一回事的狀況。</p><h2 id="Model-Binding"><a href="#Model-Binding" class="headerlink" title="Model Binding"></a>Model Binding</h2><p>先來科普一下~</p><p>最基本的有三個傳入來源</p><ol><li>Form</li><li>Route</li><li>Query</li></ol><p><img src="/image/CRzLCcT.png" alt="Image"></p><img style="max-width: 350px; width: 100%" src="/image/3vEzlK2.png"><p>可以三個都傳入，但是有其優先序<br>Form &gt; Route &gt; Query</p><p><img src="/image/jtdbZzi.png" alt="Image"></p><p>可以看到結果：</p><p>透過 Form 傳入 <code>MyId1 = 1</code><br>透過 Query 參數傳入 <code>MyId1 = 3</code>, <code>MyId2 = 4</code></p><p>因為優先序的關係，MyId1 為 Form 傳入的 <strong>1</strong>，而 MyId2 因為 Form 沒有傳入，所以是吃到 Query 的 <strong>4</strong>。</p><h2 id="Binding-Attributes"><a href="#Binding-Attributes" class="headerlink" title="Binding Attributes"></a>Binding Attributes</h2><p>除了預設的三個來源，其餘皆需設定 Attribute 來指定接收來源。</p><p>但要注意，<strong>一經指定，資料就只能透過指定的方式傳入</strong>。也就是說，如果指定的 Attribute 本來就屬於預設的來源，那傳入 Attribute 指定的來源以外，也無法自動 Binding 上去。 </p><ul><li><p><code>[FromHeader]</code><br>從 HTTP Header 取值。</p></li><li><p><code>[FromForm]</code><br>從 HTTP 的 Form 取值。</p></li><li><p><code>[FromRoute]</code><br>從 MVC Route URL 取值。</p></li><li><p><code>[FromQuery]</code><br>從 URL Query 參數取值。</p></li><li><p><code>[FromBody]</code><br>從 HTTP Body 取值，通常用於取 JSON、XML。</p></li></ul><p>加入的方式可以</p><ol><li>直接在 Action 的參數前面指定</li><li>複雜型別可以到 Model 中的成員加上</li></ol><p><img src="/image/80gy0XZ.png" alt="Image"></p><img style="max-width: 350px; width: 100%" src="/image/WIS0mNw.png"><p>以上面的例子來說，在 MyId2 指定了 <code>[FromQuery]</code>，那就算在優先序高的 Form 中傳入 <code>MyId2 = 2</code>，也不會被影響到，而是吃 Query 傳入的 <code>MyId2 = 4</code>。</p><p><img src="/image/c5MHWtF.png" alt="Image"></p><p>Q: 但如果 Query 沒有傳入 MyId2，而是只有 Form 傳入呢?</p><p>A: 如果在沒有指定 Attribute 的情況下，會吃到 Form 傳入的，但如果指定了 <code>[FromQuery]</code>，就算 Form 有傳入，也吃不到。</p><p>下圖可以看到 MyId2 沒吃到，所以回傳 int 預設的 0。</p><p><img src="/image/3mcptNJ.png" alt="Image"></p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>實際開發時，最頭痛的資料來源就屬 Json 了。</p><p>為什麼頭痛，先來看看下面這個例子…</p><h3 id="複雜型別"><a href="#複雜型別" class="headerlink" title="複雜型別"></a>複雜型別</h3><p>若有兩個 Model A、B</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> NameA &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> NameB &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 ASP.NET Framework 來說，不管 Ajax ContentType 是 Form 還是 Json，都能夠這樣直接收</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">A a, B b</span>)</span></span><br></pre></td></tr></table></figure><p>但如果是 ASP.NET Core，要接收 Json 需要指定 <code>[FromBody]</code>，否則收不進來</p><p><img src="/image/xfqZH3L.png" alt="Image"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">[FromBody] A a</span>)</span></span><br></pre></td></tr></table></figure><p>而且 <code>[FromBody]</code> 只能指定到一個參數上面，所以就算這樣寫，也只會把 Value 都嘗試 Bind 到 A 上</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">[FromBody] A a, [FromBody] B b</span>)</span></span><br></pre></td></tr></table></figure><p><img src="/image/Hpnzwvq.png" alt="Image"></p><h3 id="簡單型別"><a href="#簡單型別" class="headerlink" title="簡單型別"></a>簡單型別</h3><p>簡單型別透過 JSON 也只能帶一個上來</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">[FromBody] <span class="built_in">string</span> strA, [FromBody] <span class="built_in">string</span> strB</span>)</span></span><br></pre></td></tr></table></figure><p>這樣寫一樣綁不上去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        strA: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        strB: <span class="string">&quot;Alice&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/image/4mGvj6p.png" alt="Image"></p><p>你以為這樣就綁得上去了嗎?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify&#123;</span><br><span class="line">        strA: <span class="string">&quot;Bob&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因為不符合直接傳 string，所以名字一樣也收不了</p><p><img src="/image/OcVu3gP.png" alt="Image"></p><p>要直接傳一個 string 才收的到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/image/xmsrSJG.png" alt="Image"></p><p>夠難受吧，如果是多個簡單型別，別用 Json 了，直接發 Form 上來。</p><h2 id="問題-1，接收多個參數"><a href="#問題-1，接收多個參數" class="headerlink" title="問題 1，接收多個參數"></a>問題 1，接收多個參數</h2><p>那如果前端指定 Json，要傳多個參數上來，該怎麼辦呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    str: <span class="string">&quot;HiHi&quot;</span>,</span><br><span class="line">    a: &#123;</span><br><span class="line">        NameA: <span class="string">&quot;Bob&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        NameB: <span class="string">&quot;Alice&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>把 Action 的 Model 整理成與 Request Data 一致。</p><p>維持使用 <code>[FromBody]</code> 收 JSON 的話，就要把接收的 model 調整成與 Ajax 送上來的格式一致。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> str &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> A a &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> B b &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">[FromBody] C c</span>)</span></span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>接收 Json 只能有一個 <code>[FromBody]</code> 的限制，但 Form 沒有，所以在前端可以改 ContentType、而且你真的懶得再抽一個 Model 時，可以選擇不玩了，直接收 Form 就好XD</p><p>改用 <code>x-www-form-urlencoded</code> 可收多個參數（可以不用加 <code>[FromForm]</code>）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params"><span class="built_in">string</span> str, A a, B b</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: <span class="string">&quot;HiHi&quot;</span>,</span><br><span class="line">        NameA: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        NameB: <span class="string">&quot;Alice&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Data 的 Key 會自動去 Mapping 可能的 Model 欄位。<br>像是傳入 NameA，則會自動綁到 Model A 的 NameA。</p></blockquote><h2 id="問題-2，x-www-form-urlencoded-同名欄位-or-複雜型別"><a href="#問題-2，x-www-form-urlencoded-同名欄位-or-複雜型別" class="headerlink" title="問題 2，x-www-form-urlencoded 同名欄位 or 複雜型別"></a>問題 2，x-www-form-urlencoded 同名欄位 or 複雜型別</h2><p><code>接收多個參數</code>的問題，如果透過<code>解法二</code>處理，直接改接收 Form，那麼馬上隨之而來會有一個問題。</p><p>「平常印象中 Form 就是簡單的 key-value，沒有辦法帶 Object 格式」</p><h3 id="同名欄位"><a href="#同名欄位" class="headerlink" title="同名欄位"></a>同名欄位</h3><p>先來看看這個，如果兩個 Model 的 Name 一樣…</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSomething</span>(<span class="params">A a, B b</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是傳 Json，可能就會很自然的直接寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;AAA&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;BBB&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但 Form 該怎麼帶成上面那樣有階層式的阿…</p><p>如果直接傳兩個 Name 上去，結果會將第一個抓到的 Name 綁到 A 和 B 的 Name 上。</p><p><img src="/image/VawRThK.png" alt="Image"></p><p>Q: Form 表單的資料格式看起來都是 key = value，該怎麼帶多個同名 key 呢?</p><p>A: 答案是可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        a[Name]: <span class="string">&quot;AAA&quot;</span>,</span><br><span class="line">        b[Name]: <span class="string">&quot;BBB&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/image/Wk4FQMS.png" alt="Image"></p><h3 id="多個複雜型別"><a href="#多個複雜型別" class="headerlink" title="多個複雜型別"></a>多個複雜型別</h3><p>甚至資料是這樣子呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    str: <span class="string">&quot;myStr&quot;</span>,</span><br><span class="line">    a: &#123;</span><br><span class="line">        NameA: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        AModel: &#123;</span><br><span class="line">            Address: <span class="string">&quot;AAAAdress&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        NameB: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        BModel: &#123;</span><br><span class="line">            Address: <span class="string">&quot;BBBAdress&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q: Form 表單的資料格式看起來都是 key = value，該怎麼帶 value 是 object 的資料呢?</p><p>A: 答案是可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        a[NameA]: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        a[AModel][Address]: <span class="string">&quot;AAAAddress&quot;</span>,</span><br><span class="line">        b[NameB]: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        b[BModel][Address]: <span class="string">&quot;BBBAddress&quot;</span>,</span><br><span class="line">        str: <span class="string">&quot;myStr&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或是這樣寫（能夠自動匹配的直接傳，同名不能的就指定參數）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        NameA: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        AModel[Address]: <span class="string">&quot;AAAAddress&quot;</span>,</span><br><span class="line">        NameB: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        BModel[Address]: <span class="string">&quot;BBBAddress&quot;</span>,</span><br><span class="line">        str: <span class="string">&quot;myStr&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>其實 jQuery 在發 Ajax（<code>x-www-form-urlencoded</code>） 的時候，就會自動把參數組合成上面那樣，你什麼都不用做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myData = &#123;</span><br><span class="line">    str: <span class="string">&quot;myStr&quot;</span>,</span><br><span class="line">    a: &#123;</span><br><span class="line">        NameA: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">        AModel: &#123;</span><br><span class="line">            Address: <span class="string">&quot;AAAAdress&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        NameB: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        BModel: &#123;</span><br><span class="line">            Address: <span class="string">&quot;BBBAdress&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    contentType: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    data: myData</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>送上去的 Form Data 也會是上面範例中的型式</p><img style="max-width: 350px; width: 100%" src="/image/Du5DHSY.png"><p>後端也能正確解析</p><img style="max-width: 350px; width: 100%" src="/image/Fxcz1hP.png"><p>補充：如果在送出前就想要拿到這種格式，可以呼叫 <code>param</code> 函數，效果是一樣的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.param(myData)</span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>使用了無數次 Ajax，卻不曾停下來看他一眼，趁這次也更清楚 Form 與 Json 的用法差別。</p><p>再來是 ASP.Net Core Model Binding 的資料來源</p><h3 id="ASP-NET-Core-接收-Json"><a href="#ASP-NET-Core-接收-Json" class="headerlink" title="ASP.NET Core 接收 Json"></a>ASP.NET Core 接收 Json</h3><ol><li>一個 Action 只能有一個參數掛 <code>[FromBody]</code></li><li>簡單型別盡量不要用 Json</li><li>多個複雜型別，要再向外抽一個 Model，讓他的格式完全符合前端送上來的 Json 格式</li></ol><h3 id="ASP-NET-Core-接收-Form"><a href="#ASP-NET-Core-接收-Form" class="headerlink" title="ASP.NET Core 接收 Form"></a>ASP.NET Core 接收 Form</h3><ol><li>不會受限於只能有一個參數接收 Form 來源</li><li>多個複雜型別懶得再抽一個 Model，可以考慮用一下</li></ol><p>以上資訊如有錯誤歡迎交流補充~</p><p>下一篇會再提到 ASP.NET Core 接收 Json 還有一些討厭的狀況會讓 Model 綁不上去。</p><h1 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h1><p><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding">Model Binding in ASP.NET Core</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Model Binding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Net Core Razor View 中文被自動編碼!?</title>
      <link href="2021/04/05/aspnetcore-chinese-encoding/"/>
      <url>2021/04/05/aspnetcore-chinese-encoding/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="View-Engine"><a href="#View-Engine" class="headerlink" title="View Engine"></a>View Engine</h2><p>使用 ASP NET Core MVC 開發時，遇到 HTML 裡的中文被進行編碼，無法正常顯示。</p><p>在找問題成因的時候，出於好奇研究了一下 ASP NET 歷史版本的更新與 View HtmlEncode 的淵源，讓我們把時間倒回 2010 年吧XD</p><p>在 ASP.NET 3.5（MVC 2） 以前，WebForm View Engine 若想要編碼 HTML 中的內容以避免 XSS 問題，需要自己呼叫編碼的方法，但是每個內容都要呼叫實在很麻煩，而且開發者也常常會忘記。</p><p><img src="/image/RgIcvAq.png" alt="Image"></p><p>所幸 2011 年，ASP.NET 4（MVC 3）發佈以後，新增 <code>&lt;%: %&gt;</code> 語法來自動對內容進行 HTML 編碼，減輕了開發者的負擔與降低系統安全風險。</p><p><img src="/image/EwN1ni6.png" alt="Image"></p><p>ASP.NET 4（MVC 3）版本中，也 Release 了 Razor View Engine，因為容易學習、寫法更為簡潔方便的特性，使得它逐漸成為開發 ASP.NET MVC 網站的主流（兩者具體比較可以<a href="https://www.c-sharpcorner.com/UploadFile/ff2f08/aspx-view-engine-vs-razor-view-engine/">參考</a>）。</p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><h2 id="Net-Framework"><a href="#Net-Framework" class="headerlink" title="Net Framework"></a>Net Framework</h2><p>使用 Razor 在渲染畫面時，會自動進行編碼，防止 XSS。</p><blockquote><p>開發者記得不要在 View 裡面又呼叫 HtmlEncode 進行二次編碼。</p></blockquote><p>簡單來說 cshtml 裡面用到任何後端帶過來的變數，為避免造成 XSS 安全問題，Net Fx 和 Net Core 都會自動對特定符號轉碼。</p><p>EX: <code>&lt; &gt; &#39; &quot;</code></p><p><img src="/image/OXm9IqG.png" alt="Image"></p><p>以下可以看到測試的結果，特定的字元都被進行轉碼。</p><p><img src="/image/MmhP191.png" alt="Image"></p><h2 id="Net-Core"><a href="#Net-Core" class="headerlink" title="Net Core"></a>Net Core</h2><p>以上都沒什麼問題，但相同的測試到了 Net Core，好像有些事情不太對勁喔</p><p><img src="/image/M4miOHk.png" alt="Image"></p><p>輸出的結果</p><p><img src="/image/KULvD7j.png" alt="Image"></p><p>可以發現到，除了特定的字元以外，連中文都被編碼了，僅剩  abc123 正常顯示。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>翻了一下<a href="https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting#customizing-the-encoders">官方文件</a>真相大白</p><p><img src="/image/qQH76xd.png" alt="Image"></p><p>原來 ASP.NET Core 的 Razor TagHelper 及 HtmlHelper 預設會將所有非拉丁字元都當成特殊符號進行編碼，理由是為了防範未知或未來瀏覽器針對這些字元渲染時發生的錯誤…</p><p>解決方式也很簡單，放寬預設安全字元的限制就好。</p><p>在 <code>Startup</code> 中的 <code>ConfigureServices</code> 自訂 HtmlEncoder 安全清單，加上 <code>CJK Unified Ideographs</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;HtmlEncoder&gt;(</span><br><span class="line">     HtmlEncoder.Create(allowedRanges: <span class="keyword">new</span>[] &#123; UnicodeRanges.BasicLatin,</span><br><span class="line">                                               UnicodeRanges.CjkUnifiedIdeographs &#125;));</span><br></pre></td></tr></table></figure><blockquote><p>中日韓統一表意文字（英語：CJK Unified Ideographs），也稱統一漢字、統漢碼（英語：Unihan），目的是要把分別來自中文、日文、韓文、越南文、壯文、琉球文中，起源相同、本義相同、形狀一樣或稍異的表意文字，在ISO 10646及萬國碼標準賦予相同編碼。 <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">from wiki</a></p></blockquote><h1 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h1><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/cross-site-scripting#customizing-the-encoders">Prevent Cross-Site Scripting (XSS) in ASP.NET Core</a></p><p><a href="https://www.c-sharpcorner.com/UploadFile/abhikumarvatsa/html-encoding-in-mvc/">HTML Encoding in MVC</a></p><p><a href="https://www.c-sharpcorner.com/UploadFile/ff2f08/aspx-view-engine-vs-razor-view-engine/">ASPX View Engine VS Razor View Engine</a></p><p><a href="https://weblogs.asp.net/scottgu/new-lt-gt-syntax-for-html-encoding-output-in-asp-net-4-and-asp-net-mvc-2">HTML Encoding Output in ASP.NET 4</a></p><p><a href="https://nwpie.blogspot.com/2017/04/3-aspnet-mvc.html">ASP.NET MVC 演進歷史</a></p><p><a href="https://www.tutorialsteacher.com/mvc/asp.net-mvc-version-history">ASP.NET MVC Version History</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cshtml </tag>
            
            <tag> encoding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Net Core 多站台共用驗證 Cookie</title>
      <link href="2021/03/10/data-protection-key/"/>
      <url>2021/03/10/data-protection-key/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>當你需要一個安全的機制來保護你的資料時，不妨可以使用 Net Core 的資料保護（Data Protection）。</p><p>他有以下特點：</p><ol><li>容易使用、擴展性高</li><li>基於非對稱的加密機制</li><li>正常情況下，不需要去設定與管理任何密鑰的儲存位置與生命週期</li></ol><p>簡單來說你想加解密資料時，可以直接使用 Data Protection 的 API：</p><ul><li>Protect</li><li>Unprotect</li></ul><p>傻瓜式(?)的使用方式，也避免開發者：</p><ol><li>搞不清楚「對稱、非對稱加密、Hash、編碼」的差異下，選擇了錯誤的方式來保護敏感資料。</li><li>自己造輪子實作加解密…</li></ol><blockquote><p>了解更多 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/introduction">ASP.NET Core 資料保護</a>、<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection">ASP.NET Core 中的資料保護 Api 入門</a></p></blockquote><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>在 Net Framework 時代，透過 MachineKey 來處理 Forms Authentication 的 Cookie 加解密（當然正常情況下也不會去動到 MachineKey，都交由系統處理）。</p><p>而 Net Core 雖沒有 Forms Authentication，但卻有差不多的 Cookie-based Authentication，他的 Cookie 加解密則是由上方提到的 Data Protection 機制來處理。</p><h2 id="問題-多個站台之間無法解密彼此的驗證-Cookie"><a href="#問題-多個站台之間無法解密彼此的驗證-Cookie" class="headerlink" title="問題: 多個站台之間無法解密彼此的驗證 Cookie?"></a>問題: 多個站台之間無法解密彼此的驗證 Cookie?</h2><p>「希望在網站過版時不用停機」</p><p>前陣子碰到這個需求，所以同事多建了一個站台，設定好主站台關閉後網址如何對應到備援的站台（同個網址），然後 Cookie 的 Domain 和有效期限也都有設定好，看起來需求就解決了，但實際測試時，卻有以下問題：</p><ol><li>User 在主站台已經登入的情況下使用系統</li><li>把新程式過版到備援站台</li><li>關閉主站台，讓後續流量都交由備援站台處理</li><li>User 繼續使用系統，卻是沒有登入的狀態，被導到登入畫面</li></ol><p>當下直覺是備援站台無法讀取主站台的 Cookie，後來確認了一下，一半對一半錯XD</p><p>Cookie 是可以讀取的，畢竟是同一個網址，退一步來說就算是相同 Domain 下也會讀取的到，無法讀取的是 Cookie Authentication 的驗證 Cookie。</p><p>顯然地，備援站台因為 Key 不對，無法解開主站台留下的 Cookie，所以問題收斂成需要搞懂：</p><ol><li>Data Protection 的金鑰保存在哪?</li><li>金鑰多久會過期?</li><li>我要怎麼讓不同站台共用金鑰?</li></ol><h1 id="Data-Protection-金鑰管理與生命週期"><a href="#Data-Protection-金鑰管理與生命週期" class="headerlink" title="Data Protection 金鑰管理與生命週期"></a>Data Protection 金鑰管理與生命週期</h1><p>該來的還是得來，啃了官方<del>又香又長</del>的文件。</p><h2 id="金鑰儲存位置"><a href="#金鑰儲存位置" class="headerlink" title="金鑰儲存位置"></a>金鑰儲存位置</h2><p>會依照應用程式的操作環境而有所不同：</p><ol><li>（這裡不討論）在 Azure 上會存在 <code>%HOME%\ASP.NET\DataProtection-Keys</code> 資料夾中</li><li>其餘則是除非有特別設定，否則存放在記憶體</li></ol><p>所以有個滿嚴重的問題，如果 Net Core 專案部屬在 IIS 上，應用程式集區預設的：</p><ol><li>29 小時定期回收</li><li>閒置 20 分自動終止（Terminate）</li></ol><p>或是集區手動回收，都會導致驗證的 Cookie 無法讀取。</p><p>除了驗證 Cookie 以外，只要是該機制加密的東西也會無法讀取，像是 CSRF Token。</p><blockquote><p>補充一下實驗結果，如果集區回收可以接受金鑰遺失，而閒置不想要因為後續行為遺失的話，動作由 Terminate 改為 Suspend（凍結）、或是閒置時間直接改為 0 分鐘（不終止也不凍結），則不會導致記憶體中的金鑰遺失。</p></blockquote><p>所以如果在 IIS 下想要保存金鑰，有<a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/advanced#data-protection">多種</a>設定方式，以下列兩種較方便的設定方式：</p><ol><li>建立 Data Protection Registry keys，將金鑰放在 HKLM 機碼中，並限定該集區的帳戶才能存取。</li><li>(推薦)<br>設定 IIS 應用程式集區載入使用者設定檔，金鑰會存在 <code>%LOCALAPPDATA%\ASP.NET\DataProtection-Keys</code> 資料夾中。</li></ol><h3 id="IIS-應用程式集區載入使用者設定檔"><a href="#IIS-應用程式集區載入使用者設定檔" class="headerlink" title="IIS 應用程式集區載入使用者設定檔"></a>IIS 應用程式集區載入使用者設定檔</h3><p>設定為 True 後，會將金鑰保存到上述的資料夾路徑中，也就是圖中的 xml 檔案。</p><p><img src="/image/GcX1MKD.png" alt="Image"></p><p><img src="/image/C7qDfxV.png" alt="Image"></p><p>裡面的內容有：</p><ol><li>建立、啟用、逾期時間（除非特別設定，否則金鑰預設的存活時間是三個月）</li><li>金鑰（在 Windows 平台下會透過 DPAPI 加密）</li></ol><p><img src="/image/DrhGPLX.png" alt="Image"></p><p><strong>提醒一下，此金鑰和 MachineKey 一樣重要，千萬不能外洩!</strong></p><h1 id="接下來"><a href="#接下來" class="headerlink" title="接下來"></a>接下來</h1><p>了解 Data Protection 的金鑰管理機制後，回頭看我們的問題，還差了那麼一點，因為上面講的是單個集區保存金鑰，但多個集區（正式、備援）依舊是讀取各自保存的金鑰，只是集區回收後金鑰不會遺失而已。</p><p>所以如果要讓多個集區、或是分散式部屬的應用程式能透過 Cookie 達到 SSO 的效果，勢必得把金鑰存到這些應用都能共用的地方。</p><h1 id="自訂金鑰儲存位置"><a href="#自訂金鑰儲存位置" class="headerlink" title="自訂金鑰儲存位置"></a>自訂金鑰儲存位置</h1><p>我們可以指定金鑰存到以下位置：</p><ol><li>Azure Key Vault</li><li>File System</li><li>DB</li></ol><p>請依照專案環境選擇<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview">合適的方式</a>，像是兩個站台都建在同一台 Server 上，可以考慮存到 File System；反之可以存到 DB 比較方便。</p><h2 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h2><p>存到系統上非常簡單，如下配置後，就能夠將上述提到的 xml 存到指定路徑。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddDataProtection()</span><br><span class="line">        .PersistKeysToFileSystem(<span class="keyword">new</span> DirectoryInfo(Configuration[<span class="string">&quot;YourFilePath&quot;</span>]))</span><br><span class="line">        .SetApplicationName(<span class="string">&quot;YourApplicationName&quot;</span>);</span><br><span class="line">        <span class="comment">// 請把所有想要共用同個金鑰的應用程式都指定相同的 Application Name，</span></span><br><span class="line">        <span class="comment">// 不然就算吃到相同的金鑰，也會因為 Net Core 應用程式隔離的特性無法成功加解密</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>了解更多 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview#per-application-isolation">SetApplicationName 應用程式隔離</a></p></blockquote><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p>Key Storage Providers 也有<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-storage-providers">常見的解決方案</a>可以選擇</p><ol><li>Entity Framework Core</li><li>Redis</li></ol><p>這邊選擇透過 EF Core 存到 DB </p><p>寫法如下：</p><ol><li><p>NuGet 下載 <code>Microsoft.AspNetCore.DataProtection.EntityFrameworkCore</code></p></li><li><p>新增一個 DbContext</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.DataProtection.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyKeysContext</span> : <span class="title">DbContext</span>, <span class="title">IDataProtectionKeyContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// A recommended constructor overload when using EF Core </span></span><br><span class="line">    <span class="comment">// with dependency injection.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyKeysContext</span>(<span class="params">DbContextOptions&lt;MyKeysContext&gt; options</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">options</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This maps to the table that stores keys.</span></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;DataProtectionKey&gt; DataProtectionKeys &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置連線資訊與指定 PersistKeysToDbContext</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(</span><br><span class="line">            Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a DbContext to store your Database Keys</span></span><br><span class="line">    services.AddDbContext&lt;MyKeysContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(</span><br><span class="line">            Configuration.GetConnectionString(<span class="string">&quot;MyKeysConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using Microsoft.AspNetCore.DataProtection;</span></span><br><span class="line">    services.AddDataProtection()</span><br><span class="line">        .PersistKeysToDbContext&lt;MyKeysContext&gt;()</span><br><span class="line">        .SetApplicationName(<span class="string">&quot;YourApplicationName&quot;</span>);</span><br><span class="line">        <span class="comment">// 請把所有想要共用同個金鑰的應用程式都指定相同的 Application Name，不然就算吃到相同的金鑰，也會因為 Net Core 應用程式隔離的特性無法成功加解密</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>migration 然後 update database 產生 DataProtectionKeys 的 Table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add AddDataProtectionKeys --context MyKeysContext</span><br><span class="line">dotnet ef database update --context MyKeysContext</span><br></pre></td></tr></table></figure></li></ol><p>存到 DB 其實只是把 xml 內容存進去而已，沒有做特別改動</p><p><img src="/image/twJWzAv.png" alt="Image"></p><h2 id="DB-First-解決方法"><a href="#DB-First-解決方法" class="headerlink" title="DB First 解決方法"></a>DB First 解決方法</h2><p>基本上就是這樣，如果有問題的話大概就是第四步，因為我們專案 EF Core 是採 DB First 形式，還是可以解決，只是會有兩種方法：</p><ol><li>可以的話直接 migration 然後 update database，長出 DataProtectionKeys 的 Table 之後，把所有 migration 相關的資料夾、檔案、Table 都刪除。</li><li>如果不能用程式動 Table 的話，可以把 DataProtectionKeys 的 Table 寫成 SQL Script 來給相關人員 Create。</li></ol><p><img src="/image/48rFEDp.png" alt="Image"></p><p>這邊附上 SQL Server + SSMS 直接產生的 Script，使用前請先確認你使用的 DB 語法有沒有正確。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">IF  EXISTS (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys.objects <span class="keyword">WHERE</span> object_id = OBJECT_ID(N<span class="string">&#x27;[dbo].[DataProtectionKeys]&#x27;</span>) <span class="keyword">AND</span> <span class="keyword">type</span> <span class="keyword">in</span> (N<span class="string">&#x27;U&#x27;</span>))</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [dbo].[DataProtectionKeys]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[DataProtectionKeys](</span><br><span class="line">[<span class="keyword">Id</span>] [<span class="built_in">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[FriendlyName] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line">[<span class="keyword">Xml</span>] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_DataProtectionKeys] PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">[<span class="keyword">Id</span>] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY] TEXTIMAGE_ON [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="金鑰加密"><a href="#金鑰加密" class="headerlink" title="!!金鑰加密!!"></a>!!金鑰加密!!</h2><p>只要指定金鑰的儲存位置，不管是存到 File System 還是 DB，Net Core 都不會把金鑰加密，因為他不知道 DPAPI 是否為適當的加密機制，所以如果有改變儲存位置，記得選擇適當的加密方式。</p><ol><li>DPAPI（Windows Only）</li><li>X.509 憑證</li><li>自訂</li></ol><p>若以保存到 File System 為例，XML 打開會看到警示: <code>Warning: the key below is in an unencrypted form.</code>。</p><p><img src="/image/eMJxVp0.png" alt="Image"></p><blockquote><p>了解更多 <a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-encryption-at-rest">NET Core 的待用金鑰加密</a></p></blockquote><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>我最後選擇透過 EF Core 將金鑰存到 DB，設定共用的金鑰後，也成功讓正式與備援站台讀取彼此的驗證 Cookie 達到不停機過版的效果，當然未來如果 I/O 遇到效能瓶頸，可能會考慮存到 Redis。</p><p>礙於篇幅與實用性，沒有講到全部的細節，故在文中都有穿插連結，不管是有興趣的人還是想要自己處理金鑰的人，都建議閱讀。</p><p>文中內容若有錯誤的地方，請不吝告知。</p><h1 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h1><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview">設定 ASP.NET Core 資料保護</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-encryption-at-rest">Windows 和 Azure 中使用 ASP.NET Core 的待用金鑰加密</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-storage-providers">ASP.NET Core 中的金鑰儲存提供者</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/default-settings">ASP.NET Core 中的資料保護金鑰管理和存留期</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/advanced?view=aspnetcore-5.0#data-protection">ASP.NET Core 模組和 IIS 的 Advanced configuration</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/security/cookie-sharing">cookie在 ASP.NET apps 之間共用驗證</a></p><p><a href="https://medium.com/swlh/how-to-distribute-data-protection-keys-with-an-asp-net-core-web-app-8b2b5d52851b">How to distribute Data Protection keys with an ASP.NET Core web app</a></p><p><a href="https://blog.darkthread.net/blog/inside-aspnet-autogenkeys/">ASP.NET MachineKey自動產生原理剖析</a></p><p><a href="https://www.cnblogs.com/savorboard/p/5778616.html">ASP.NET Core 数据保护（Data Protection）【上】</a></p><p><a href="https://www.cnblogs.com/liang24/p/13925057.html">ASP.NET Core Authentication系列（四）基于Cookie实现多应用间单点登录（SSO）</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Protection </tag>
            
            <tag> Cookie </tag>
            
            <tag> SSO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TickTick 待辦事項與行事曆結合 - 基本使用指南</title>
      <link href="2020/12/06/ticktick-startup/"/>
      <url>2020/12/06/ticktick-startup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>對於待辦事項，之前一直沒有好的方式來管理，最早是嘗試使用行事曆，也就是把待辦事項都當成行程放在裡面，但這會有三個問題:</p><ol><li>有些任務是沒有時間概念、或是急迫性的，也就是什麼時候做都可以</li><li>任務之間會有不同的大分類，Ex: 個人、工作，沒辦法很好的分開他們</li><li>行事曆沒辦法一目瞭然的看到所有 ToDoList，所有任務都和日期格子混在一起，導致時間久了，非常懶得開</li></ol><p>後來有嘗試 Google Keep + Google Calandar，這個其實很接近我想要的管理方式了</p><ol><li>任務都放在 Google Keep 上，很簡單就能夠管理</li><li>有需要時間概念的，就把任務壓上提醒時間</li></ol><p>但這還是有四個問題</p><ol><li>行事曆仍然與待辦事項分開，要用兩個 App</li><li>待辦事項用 Google Keep 有時過於陽春，缺乏良好的管理與搜尋方式</li><li>Google Keep 在 IOS 上的體驗非常不好 (截至 2020/12/06)，每次開啟 App 都會停頓個幾秒，好像是在同步，然後便籤很容易誤觸打開或關閉，拖動 Task 也常常卡頓</li><li>缺乏 Kanban 概念，沒辦法像 Trello 那樣把較複雜的任務，視覺化的拖動來控制任務狀態，Ex: Todo、In Progress、Resolved…</li></ol><p>後來有查了一些熱門的待辦事項解決方案</p><ul><li>Todoist<ul><li>跨平台、訂閱制，免費方案沒有提醒功能</li></ul></li><li>TickTick<ul><li>跨平台、訂閱制，免費方案有提醒功能 + 週行事曆</li></ul></li><li>Trello + 行事曆<ul><li>跨平台、但沒辦法一個 App 搞定</li></ul></li><li>OmniFocus (IOS)<ul><li>功能非常完整，但介面複雜、太麻煩、價格太高</li></ul></li></ul><p>經過簡單評估與試用了 Todoist、TickTick 後，覺得 TickTick 完美符合了我的需求XD</p><p>但 TickTick 有中資背景，會介意的三思</p><h1 id="正文開始"><a href="#正文開始" class="headerlink" title="正文開始"></a>正文開始</h1><p>基本操作就不再介紹了，應該簡單到下載安裝好就會使用，第一次使用也會有新手教學。</p><p>以下會直接以<strong>實際情境</strong>來介紹</p><h2 id="分組"><a href="#分組" class="headerlink" title="分組"></a>分組</h2><p>能夠建立好幾個清單來分開 <strong>個人</strong> 與 <strong>工作</strong> 的待辦事項</p><img style="max-width: 350px; width: 100%" src="/image/e00YuXh.jpg"><h2 id="待辦清單"><a href="#待辦清單" class="headerlink" title="待辦清單"></a>待辦清單</h2><p>待辦清單除了標題以外，也可以在補充一些內容，或是子任務</p><img style="max-width: 350px; width: 100%" src="/image/3ozLMgr.jpg"><img style="max-width: 350px; width: 100%" src="/image/sTqqAME.jpg"><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>這個有點像心得總結，你可以新增一個非待辦事項的筆記，用來總結一週心得或是任何你想記錄的</p><p>第一張圖片裡面，我就為每個分組都新增了一個 Notes 清單</p><img style="max-width: 350px; width: 100%" src="/image/D3Is1fC.jpg"><h2 id="Kanban"><a href="#Kanban" class="headerlink" title="Kanban"></a>Kanban</h2><p>除了條列式的呈現待辦事項以外，也可以切換其他看板模式，達到 Kanban 管理<strong>有狀態</strong>的任務效果。</p><p>我是把 Work 的 List 改成看板而已，因為 Work 的事項有時候比較沒有辦法短時間就完成，但還是要紀錄已經開始處理。</p><img style="max-width: 350px; width: 100%" src="/image/MytQ6LZ.jpg"><img style="max-width: 350px; width: 100%" src="/image/HHgTNpc.jpg"><img style="max-width: 350px; width: 100%" src="/image/7lbRVWX.jpg"><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>免費版只能使用<strong>週行事曆</strong>而以，需要更詳細的功能可以付費支持。</p><p>行事曆可以一目瞭然的顯示「幾月幾號有什麼事情要做」</p><img style="max-width: 350px; width: 100%" src="/image/P0LauKM.jpg"><h3 id="同步其他行事曆"><a href="#同步其他行事曆" class="headerlink" title="同步其他行事曆"></a>同步其他行事曆</h3><p>若有其他行事曆，Ex: iPhone / Google 行事曆，也可以把上面的任務同步進 TickTick</p><img style="max-width: 350px; width: 100%" src="/image/YEh5zkQ.jpg"><h2 id="Smart-List"><a href="#Smart-List" class="headerlink" title="Smart List"></a>Smart List</h2><p>上面範例使用了 Work + Personal + Blog 三個清單，若要知道今天或明天總共有哪些待辦事項，不需要每個清單查看，可以到預設的智慧清單查看就好，Ex: 今天、明天、未來 7 天…etc，會幫你統整所有 List 在當天需要做的事情。</p><img style="max-width: 350px; width: 100%" src="/image/XdjaPqr.jpg"><h2 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h2><p>TickTick 支援: Web、Windows、Mac、IOS、Android</p><p>若在電腦使用，我建議安裝軟體，而不是使用 Webapp，好處有</p><ol><li>可設定開機自動啟動，Webapp 87% 的機率你過一陣子就不會去開他</li><li>提醒方式更加友善</li><li>看板拖拉更直覺</li><li>可設定桌面懸浮</li></ol><p><img src="/image/VpyDeAb.jpg"></p><p>桌面懸浮可以新增、顯示待辦事項，若不需要使用也會自動縮合在螢幕邊緣，非常實用</p><img style="max-width: 350px; width: 100%" src="/image/Gvkitkh.png"><img style="max-width: 350px; width: 100%" src="/image/POKIs05.jpg"><h2 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h2><p>其他還有番茄鐘、打卡養成習慣等功能，若有興趣的也可以自行研究。</p><p>自己是有在電腦使用番茄鐘，還滿方便的，也不用另外在裝軟體或套件，蕃茄鐘也能夠把執行的時間紀錄給某個任務，然後可以到統計圖表查看處理任務花了多少時間。</p><h1 id="碎念"><a href="#碎念" class="headerlink" title="碎念"></a>碎念</h1><p>以上範例都有解決了我的需求</p><ol><li>簡單管理任務</li><li>結合行事曆</li><li>單一 App</li><li>提醒功能</li><li>心得紀錄</li><li>看板功能</li></ol><p>若有類似需求，或是腦袋已經不堪現實的摧殘，需要助手來幫你管理待辦事項的，強力推薦可以嘗試使用XD</p><h2 id="GTD"><a href="#GTD" class="headerlink" title="GTD"></a>GTD</h2><p>如果想要更進階的流程，像是用 GTD（Getting Things Done）的精神來管理，我覺得 TickTick 也是能夠勝任的。</p><p>像是一開始的蒐集階段，TickTick 就有一個收集箱來讓你放</p><ul><li>靈感突發想到的事情，但還不想分類</li><li>瑣碎但還不足以執行的想法</li><li>etc…</li></ul><p>週任務也能夠新增 List 來解決，每週的檢討也能放在 Notes 裡面，這部分就留給讀者自行研究了。</p><p><img src="/image/753PDvM.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> ToDoList </category>
          
          <category> TickTick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TickTick </tag>
            
            <tag> ToDoList </tag>
            
            <tag> Kanban </tag>
            
            <tag> Calendar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建站心得</title>
      <link href="2020/11/30/hexo-note/"/>
      <url>2020/11/30/hexo-note/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原本以為用 Hexo、挑個 Theme，之後把 Blog 建起來應該不會遇到什麼問題，也不用特別記錄下來，但…事與願違XD</p><h1 id="本文開始"><a href="#本文開始" class="headerlink" title="本文開始"></a>本文開始</h1><p>我用的主題是 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，理論上只要把裡面文檔都看過就能解決 90% 的問題，也不太需要看<a href="https://hexo.io/zh-tw/docs/">官方文檔</a>，弄好之後放在 Github Page，然後前面掛個 Cloudflare。</p><p>Hexo 大致設定</p><ul><li>Disqus / Facebook Comments</li><li>PWA</li><li>Custom Pagination、Footer</li><li>Edit Scaffolds</li></ul><p>Cloudflare 大致設定</p><ul><li>SSL、Always Use HTTPS、Automatic HTTPS Rewrites</li><li>Auto Minify、Cache、Always Online</li></ul><p>SEO 大致處理</p><ul><li>Sitemap、Robots.txt</li><li>Nofollow</li><li>Submit to Google Search Console</li></ul><p>科普知識就不提了，網路上已經很多詳細的文章</p><ul><li>What ‘s Hexo and Why</li><li>What’s Markdown</li><li>How to deploy to Github Page</li><li>How to use your custom domain and How to buy</li><li>What’s SSL</li><li>etc…</li></ul><p>以下會列出當時有遇到的一些問題。</p><h2 id="Pagination-預設-Style-以圖片為背景"><a href="#Pagination-預設-Style-以圖片為背景" class="headerlink" title="Pagination 預設 Style 以圖片為背景"></a>Pagination 預設 Style 以圖片為背景</h2><p><img src="/image/ZciUF7y.png"><br><a href="https://jerryc.me/posts/21cfbf15/">圖片來源</a></p><p>主題預設每個 Post 都會有一個封面圖片，如果不想要可以去設定檔拿掉，但拿掉圖片，上/下一頁連結就變成高度很高，但背景是白的連結了。</p><p>只想要單純的文字，像這樣的話</p><p><img src="/image/PfZNzxO.png"></p><p>要直接改 <code>themes\butterfly\layout\includes\pagination.pug</code></p><p>以下節錄我調整後的程式碼，以可以調整成自己喜歡的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if(page.prev)</span><br><span class="line">    - var hasPageNext &#x3D; page.next ? &#39;pull-left&#39; : &#39;pull-full&#39;</span><br><span class="line">    .prev-post(class&#x3D;hasPageNext)</span><br><span class="line">        a(href&#x3D;url_for(page.prev.path))</span><br><span class="line">            .pagination-info</span><br><span class="line">                .i.fa.fa-chevron-circle-left</span><br><span class="line">                .prev_info&#x3D;page.prev.title</span><br><span class="line">          </span><br><span class="line">if(page.next)</span><br><span class="line">    - var hasPagePrev &#x3D; page.prev ? &#39;pull-right&#39; : &#39;pull-full&#39;</span><br><span class="line">    .next-post(class&#x3D;hasPagePrev)</span><br><span class="line">        a(href&#x3D;url_for(page.next.path))</span><br><span class="line">            .pagination-info</span><br><span class="line">                .i.fa.fa-chevron-circle-right</span><br><span class="line">                .next_info&#x3D;page.next.title </span><br></pre></td></tr></table></figure><h2 id="Facebook-Comments"><a href="#Facebook-Comments" class="headerlink" title="Facebook Comments"></a>Facebook Comments</h2><h3 id="超級無敵大雷1"><a href="#超級無敵大雷1" class="headerlink" title="超級無敵大雷1"></a>超級無敵大雷1</h3><p>我網站主題是深色(Dark)，但 FaceBook Comments Dark Theme 目前壞掉，只能透過 CSS 把評論區塊背景設為白色，不然會完全看不到字 (Disqus 沒這個問題)。</p><p><img src="/image/zGv7BAv.png"></p><p>看起來和 Hexo 無關，是 Facebook 的問題、也有人 2020/08/12 回報了，雖然進度上寫處理完畢，但我 2020/11/30 測試起來問題仍在。</p><p><a href="https://developers.facebook.com/support/bugs/1759174414250782/">https://developers.facebook.com/support/bugs/1759174414250782/</a></p><p><img src="/image/6QZkv1C.png"></p><p>不想放棄 Facebook Comments + 深色主題的話，我的解法是把 Facebook 的 Comment 區塊直接背景變白色XD</p><p><code>themes\butterfly\source\css\_layout\comments.styl</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.comment-wrap</span><br><span class="line">    &gt; div:nth-child(2)</span><br><span class="line">        background-color: white !important;</span><br><span class="line">        border-radius: 5px !important;</span><br></pre></td></tr></table></figure><p><img src="/image/STYzbcG.png"></p><p>而 Disqus 則維持原本正常的深色主題</p><p><img src="/image/tfiVAJ1.png"></p><h3 id="超級無敵大雷2"><a href="#超級無敵大雷2" class="headerlink" title="超級無敵大雷2"></a>超級無敵大雷2</h3><p>原本以為這樣就高枕無憂，但 2020/11/30 的 IOS 不管是 Chrome 還是 Safari 都無法透過 Facebook Comments 留言，但桌面版、Android 的可以正常留言…</p><p>狀況有2</p><ol><li>明明已經有登入 Facebook，但留言區抓不到，一樣要登入，可是點了登入之後就瘋狂無限白畫面跳轉。</li><li>留言框自己不斷重整，無法選取打字。</li></ol><p>以上問題測試了 3 台 iPhone 都是這樣QQ，一開始以為是我哪裡沒處理好，但到幾個新聞網站 (水果、聯X) 的留言區測試，發現一樣有這些問題…，這個狀況目前無解。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Facebook Comment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
